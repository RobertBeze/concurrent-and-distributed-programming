// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* test.h
   Generated by wsdl2h 2.8.122 from test.wsdl and typemap.dat
   2022-06-14 17:03:35 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2022, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on test.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.example.org/operations/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://www.example.org/operations/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.example.org/operations/"
//gsoap ns1   schema namespace:	http://www.example.org/operations/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.example.org/operations/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.example.org/operations/                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.example.org/operations/":storeFile
/// @brief "http://www.example.org/operations/":storeFile is a complexType.
///
/// @note struct _ns1__storeFile operations:
/// - _ns1__storeFile* soap_new__ns1__storeFile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__storeFile(struct soap*, _ns1__storeFile*) default initialize members
/// - int soap_read__ns1__storeFile(struct soap*, _ns1__storeFile*) deserialize from a source
/// - int soap_write__ns1__storeFile(struct soap*, _ns1__storeFile*) serialize to a sink
/// - _ns1__storeFile* soap_dup__ns1__storeFile(struct soap*, _ns1__storeFile* dst, _ns1__storeFile *src) returns deep copy of _ns1__storeFile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__storeFile(_ns1__storeFile*) deep deletes _ns1__storeFile data members, use only on dst after soap_dup__ns1__storeFile(NULL, _ns1__storeFile *dst, _ns1__storeFile *src) (use soapcpp2 -Ed)
struct _ns1__storeFile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":storeFileResponse
/// @brief "http://www.example.org/operations/":storeFileResponse is a complexType.
///
/// @note struct _ns1__storeFileResponse operations:
/// - _ns1__storeFileResponse* soap_new__ns1__storeFileResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__storeFileResponse(struct soap*, _ns1__storeFileResponse*) default initialize members
/// - int soap_read__ns1__storeFileResponse(struct soap*, _ns1__storeFileResponse*) deserialize from a source
/// - int soap_write__ns1__storeFileResponse(struct soap*, _ns1__storeFileResponse*) serialize to a sink
/// - _ns1__storeFileResponse* soap_dup__ns1__storeFileResponse(struct soap*, _ns1__storeFileResponse* dst, _ns1__storeFileResponse *src) returns deep copy of _ns1__storeFileResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__storeFileResponse(_ns1__storeFileResponse*) deep deletes _ns1__storeFileResponse data members, use only on dst after soap_dup__ns1__storeFileResponse(NULL, _ns1__storeFileResponse *dst, _ns1__storeFileResponse *src) (use soapcpp2 -Ed)
struct _ns1__storeFileResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":createFile
/// @brief "http://www.example.org/operations/":createFile is a complexType.
///
/// @note struct _ns1__createFile operations:
/// - _ns1__createFile* soap_new__ns1__createFile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__createFile(struct soap*, _ns1__createFile*) default initialize members
/// - int soap_read__ns1__createFile(struct soap*, _ns1__createFile*) deserialize from a source
/// - int soap_write__ns1__createFile(struct soap*, _ns1__createFile*) serialize to a sink
/// - _ns1__createFile* soap_dup__ns1__createFile(struct soap*, _ns1__createFile* dst, _ns1__createFile *src) returns deep copy of _ns1__createFile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__createFile(_ns1__createFile*) deep deletes _ns1__createFile data members, use only on dst after soap_dup__ns1__createFile(NULL, _ns1__createFile *dst, _ns1__createFile *src) (use soapcpp2 -Ed)
struct _ns1__createFile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":createFileResponse
/// @brief "http://www.example.org/operations/":createFileResponse is a complexType.
///
/// @note struct _ns1__createFileResponse operations:
/// - _ns1__createFileResponse* soap_new__ns1__createFileResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__createFileResponse(struct soap*, _ns1__createFileResponse*) default initialize members
/// - int soap_read__ns1__createFileResponse(struct soap*, _ns1__createFileResponse*) deserialize from a source
/// - int soap_write__ns1__createFileResponse(struct soap*, _ns1__createFileResponse*) serialize to a sink
/// - _ns1__createFileResponse* soap_dup__ns1__createFileResponse(struct soap*, _ns1__createFileResponse* dst, _ns1__createFileResponse *src) returns deep copy of _ns1__createFileResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__createFileResponse(_ns1__createFileResponse*) deep deletes _ns1__createFileResponse data members, use only on dst after soap_dup__ns1__createFileResponse(NULL, _ns1__createFileResponse *dst, _ns1__createFileResponse *src) (use soapcpp2 -Ed)
struct _ns1__createFileResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":modifyFile
/// @brief "http://www.example.org/operations/":modifyFile is a complexType.
///
/// @note struct _ns1__modifyFile operations:
/// - _ns1__modifyFile* soap_new__ns1__modifyFile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__modifyFile(struct soap*, _ns1__modifyFile*) default initialize members
/// - int soap_read__ns1__modifyFile(struct soap*, _ns1__modifyFile*) deserialize from a source
/// - int soap_write__ns1__modifyFile(struct soap*, _ns1__modifyFile*) serialize to a sink
/// - _ns1__modifyFile* soap_dup__ns1__modifyFile(struct soap*, _ns1__modifyFile* dst, _ns1__modifyFile *src) returns deep copy of _ns1__modifyFile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__modifyFile(_ns1__modifyFile*) deep deletes _ns1__modifyFile data members, use only on dst after soap_dup__ns1__modifyFile(NULL, _ns1__modifyFile *dst, _ns1__modifyFile *src) (use soapcpp2 -Ed)
struct _ns1__modifyFile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":modifyFileResponse
/// @brief "http://www.example.org/operations/":modifyFileResponse is a complexType.
///
/// @note struct _ns1__modifyFileResponse operations:
/// - _ns1__modifyFileResponse* soap_new__ns1__modifyFileResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__modifyFileResponse(struct soap*, _ns1__modifyFileResponse*) default initialize members
/// - int soap_read__ns1__modifyFileResponse(struct soap*, _ns1__modifyFileResponse*) deserialize from a source
/// - int soap_write__ns1__modifyFileResponse(struct soap*, _ns1__modifyFileResponse*) serialize to a sink
/// - _ns1__modifyFileResponse* soap_dup__ns1__modifyFileResponse(struct soap*, _ns1__modifyFileResponse* dst, _ns1__modifyFileResponse *src) returns deep copy of _ns1__modifyFileResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__modifyFileResponse(_ns1__modifyFileResponse*) deep deletes _ns1__modifyFileResponse data members, use only on dst after soap_dup__ns1__modifyFileResponse(NULL, _ns1__modifyFileResponse *dst, _ns1__modifyFileResponse *src) (use soapcpp2 -Ed)
struct _ns1__modifyFileResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":removeFile
/// @brief "http://www.example.org/operations/":removeFile is a complexType.
///
/// @note struct _ns1__removeFile operations:
/// - _ns1__removeFile* soap_new__ns1__removeFile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__removeFile(struct soap*, _ns1__removeFile*) default initialize members
/// - int soap_read__ns1__removeFile(struct soap*, _ns1__removeFile*) deserialize from a source
/// - int soap_write__ns1__removeFile(struct soap*, _ns1__removeFile*) serialize to a sink
/// - _ns1__removeFile* soap_dup__ns1__removeFile(struct soap*, _ns1__removeFile* dst, _ns1__removeFile *src) returns deep copy of _ns1__removeFile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__removeFile(_ns1__removeFile*) deep deletes _ns1__removeFile data members, use only on dst after soap_dup__ns1__removeFile(NULL, _ns1__removeFile *dst, _ns1__removeFile *src) (use soapcpp2 -Ed)
struct _ns1__removeFile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":removeFileResponse
/// @brief "http://www.example.org/operations/":removeFileResponse is a complexType.
///
/// @note struct _ns1__removeFileResponse operations:
/// - _ns1__removeFileResponse* soap_new__ns1__removeFileResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__removeFileResponse(struct soap*, _ns1__removeFileResponse*) default initialize members
/// - int soap_read__ns1__removeFileResponse(struct soap*, _ns1__removeFileResponse*) deserialize from a source
/// - int soap_write__ns1__removeFileResponse(struct soap*, _ns1__removeFileResponse*) serialize to a sink
/// - _ns1__removeFileResponse* soap_dup__ns1__removeFileResponse(struct soap*, _ns1__removeFileResponse* dst, _ns1__removeFileResponse *src) returns deep copy of _ns1__removeFileResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__removeFileResponse(_ns1__removeFileResponse*) deep deletes _ns1__removeFileResponse data members, use only on dst after soap_dup__ns1__removeFileResponse(NULL, _ns1__removeFileResponse *dst, _ns1__removeFileResponse *src) (use soapcpp2 -Ed)
struct _ns1__removeFileResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":store_exec_file
/// @brief "http://www.example.org/operations/":store_exec_file is a complexType.
///
/// @note struct _ns1__store_USCOREexec_USCOREfile operations:
/// - _ns1__store_USCOREexec_USCOREfile* soap_new__ns1__store_USCOREexec_USCOREfile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__store_USCOREexec_USCOREfile(struct soap*, _ns1__store_USCOREexec_USCOREfile*) default initialize members
/// - int soap_read__ns1__store_USCOREexec_USCOREfile(struct soap*, _ns1__store_USCOREexec_USCOREfile*) deserialize from a source
/// - int soap_write__ns1__store_USCOREexec_USCOREfile(struct soap*, _ns1__store_USCOREexec_USCOREfile*) serialize to a sink
/// - _ns1__store_USCOREexec_USCOREfile* soap_dup__ns1__store_USCOREexec_USCOREfile(struct soap*, _ns1__store_USCOREexec_USCOREfile* dst, _ns1__store_USCOREexec_USCOREfile *src) returns deep copy of _ns1__store_USCOREexec_USCOREfile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__store_USCOREexec_USCOREfile(_ns1__store_USCOREexec_USCOREfile*) deep deletes _ns1__store_USCOREexec_USCOREfile data members, use only on dst after soap_dup__ns1__store_USCOREexec_USCOREfile(NULL, _ns1__store_USCOREexec_USCOREfile *dst, _ns1__store_USCOREexec_USCOREfile *src) (use soapcpp2 -Ed)
struct _ns1__store_USCOREexec_USCOREfile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":store_exec_fileResponse
/// @brief "http://www.example.org/operations/":store_exec_fileResponse is a complexType.
///
/// @note struct _ns1__store_USCOREexec_USCOREfileResponse operations:
/// - _ns1__store_USCOREexec_USCOREfileResponse* soap_new__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, _ns1__store_USCOREexec_USCOREfileResponse*) default initialize members
/// - int soap_read__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, _ns1__store_USCOREexec_USCOREfileResponse*) deserialize from a source
/// - int soap_write__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, _ns1__store_USCOREexec_USCOREfileResponse*) serialize to a sink
/// - _ns1__store_USCOREexec_USCOREfileResponse* soap_dup__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, _ns1__store_USCOREexec_USCOREfileResponse* dst, _ns1__store_USCOREexec_USCOREfileResponse *src) returns deep copy of _ns1__store_USCOREexec_USCOREfileResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__store_USCOREexec_USCOREfileResponse(_ns1__store_USCOREexec_USCOREfileResponse*) deep deletes _ns1__store_USCOREexec_USCOREfileResponse data members, use only on dst after soap_dup__ns1__store_USCOREexec_USCOREfileResponse(NULL, _ns1__store_USCOREexec_USCOREfileResponse *dst, _ns1__store_USCOREexec_USCOREfileResponse *src) (use soapcpp2 -Ed)
struct _ns1__store_USCOREexec_USCOREfileResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":clientLogFiles
/// @brief "http://www.example.org/operations/":clientLogFiles is a complexType.
///
/// @note struct _ns1__clientLogFiles operations:
/// - _ns1__clientLogFiles* soap_new__ns1__clientLogFiles(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__clientLogFiles(struct soap*, _ns1__clientLogFiles*) default initialize members
/// - int soap_read__ns1__clientLogFiles(struct soap*, _ns1__clientLogFiles*) deserialize from a source
/// - int soap_write__ns1__clientLogFiles(struct soap*, _ns1__clientLogFiles*) serialize to a sink
/// - _ns1__clientLogFiles* soap_dup__ns1__clientLogFiles(struct soap*, _ns1__clientLogFiles* dst, _ns1__clientLogFiles *src) returns deep copy of _ns1__clientLogFiles src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__clientLogFiles(_ns1__clientLogFiles*) deep deletes _ns1__clientLogFiles data members, use only on dst after soap_dup__ns1__clientLogFiles(NULL, _ns1__clientLogFiles *dst, _ns1__clientLogFiles *src) (use soapcpp2 -Ed)
struct _ns1__clientLogFiles
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":NewOperationResponse
/// @brief "http://www.example.org/operations/":NewOperationResponse is a complexType.
///
/// @note struct _ns1__NewOperationResponse operations:
/// - _ns1__NewOperationResponse* soap_new__ns1__NewOperationResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__NewOperationResponse(struct soap*, _ns1__NewOperationResponse*) default initialize members
/// - int soap_read__ns1__NewOperationResponse(struct soap*, _ns1__NewOperationResponse*) deserialize from a source
/// - int soap_write__ns1__NewOperationResponse(struct soap*, _ns1__NewOperationResponse*) serialize to a sink
/// - _ns1__NewOperationResponse* soap_dup__ns1__NewOperationResponse(struct soap*, _ns1__NewOperationResponse* dst, _ns1__NewOperationResponse *src) returns deep copy of _ns1__NewOperationResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__NewOperationResponse(_ns1__NewOperationResponse*) deep deletes _ns1__NewOperationResponse data members, use only on dst after soap_dup__ns1__NewOperationResponse(NULL, _ns1__NewOperationResponse *dst, _ns1__NewOperationResponse *src) (use soapcpp2 -Ed)
struct _ns1__NewOperationResponse
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":clientLogFilesResponse1
/// @brief "http://www.example.org/operations/":clientLogFilesResponse1 is a complexType.
///
/// @note struct _ns1__clientLogFilesResponse1 operations:
/// - _ns1__clientLogFilesResponse1* soap_new__ns1__clientLogFilesResponse1(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__clientLogFilesResponse1(struct soap*, _ns1__clientLogFilesResponse1*) default initialize members
/// - int soap_read__ns1__clientLogFilesResponse1(struct soap*, _ns1__clientLogFilesResponse1*) deserialize from a source
/// - int soap_write__ns1__clientLogFilesResponse1(struct soap*, _ns1__clientLogFilesResponse1*) serialize to a sink
/// - _ns1__clientLogFilesResponse1* soap_dup__ns1__clientLogFilesResponse1(struct soap*, _ns1__clientLogFilesResponse1* dst, _ns1__clientLogFilesResponse1 *src) returns deep copy of _ns1__clientLogFilesResponse1 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__clientLogFilesResponse1(_ns1__clientLogFilesResponse1*) deep deletes _ns1__clientLogFilesResponse1 data members, use only on dst after soap_dup__ns1__clientLogFilesResponse1(NULL, _ns1__clientLogFilesResponse1 *dst, _ns1__clientLogFilesResponse1 *src) (use soapcpp2 -Ed)
struct _ns1__clientLogFilesResponse1
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":servFiles
/// @brief "http://www.example.org/operations/":servFiles is a complexType.
///
/// @note struct _ns1__servFiles operations:
/// - _ns1__servFiles* soap_new__ns1__servFiles(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__servFiles(struct soap*, _ns1__servFiles*) default initialize members
/// - int soap_read__ns1__servFiles(struct soap*, _ns1__servFiles*) deserialize from a source
/// - int soap_write__ns1__servFiles(struct soap*, _ns1__servFiles*) serialize to a sink
/// - _ns1__servFiles* soap_dup__ns1__servFiles(struct soap*, _ns1__servFiles* dst, _ns1__servFiles *src) returns deep copy of _ns1__servFiles src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__servFiles(_ns1__servFiles*) deep deletes _ns1__servFiles data members, use only on dst after soap_dup__ns1__servFiles(NULL, _ns1__servFiles *dst, _ns1__servFiles *src) (use soapcpp2 -Ed)
struct _ns1__servFiles
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":servFilesResponse1
/// @brief "http://www.example.org/operations/":servFilesResponse1 is a complexType.
///
/// @note struct _ns1__servFilesResponse1 operations:
/// - _ns1__servFilesResponse1* soap_new__ns1__servFilesResponse1(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__servFilesResponse1(struct soap*, _ns1__servFilesResponse1*) default initialize members
/// - int soap_read__ns1__servFilesResponse1(struct soap*, _ns1__servFilesResponse1*) deserialize from a source
/// - int soap_write__ns1__servFilesResponse1(struct soap*, _ns1__servFilesResponse1*) serialize to a sink
/// - _ns1__servFilesResponse1* soap_dup__ns1__servFilesResponse1(struct soap*, _ns1__servFilesResponse1* dst, _ns1__servFilesResponse1 *src) returns deep copy of _ns1__servFilesResponse1 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__servFilesResponse1(_ns1__servFilesResponse1*) deep deletes _ns1__servFilesResponse1 data members, use only on dst after soap_dup__ns1__servFilesResponse1(NULL, _ns1__servFilesResponse1 *dst, _ns1__servFilesResponse1 *src) (use soapcpp2 -Ed)
struct _ns1__servFilesResponse1
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":filesInCertainProgLanguage
/// @brief "http://www.example.org/operations/":filesInCertainProgLanguage is a complexType.
///
/// @note struct _ns1__filesInCertainProgLanguage operations:
/// - _ns1__filesInCertainProgLanguage* soap_new__ns1__filesInCertainProgLanguage(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__filesInCertainProgLanguage(struct soap*, _ns1__filesInCertainProgLanguage*) default initialize members
/// - int soap_read__ns1__filesInCertainProgLanguage(struct soap*, _ns1__filesInCertainProgLanguage*) deserialize from a source
/// - int soap_write__ns1__filesInCertainProgLanguage(struct soap*, _ns1__filesInCertainProgLanguage*) serialize to a sink
/// - _ns1__filesInCertainProgLanguage* soap_dup__ns1__filesInCertainProgLanguage(struct soap*, _ns1__filesInCertainProgLanguage* dst, _ns1__filesInCertainProgLanguage *src) returns deep copy of _ns1__filesInCertainProgLanguage src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__filesInCertainProgLanguage(_ns1__filesInCertainProgLanguage*) deep deletes _ns1__filesInCertainProgLanguage data members, use only on dst after soap_dup__ns1__filesInCertainProgLanguage(NULL, _ns1__filesInCertainProgLanguage *dst, _ns1__filesInCertainProgLanguage *src) (use soapcpp2 -Ed)
struct _ns1__filesInCertainProgLanguage
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":filesInCertainProgLanguageResponse1
/// @brief "http://www.example.org/operations/":filesInCertainProgLanguageResponse1 is a complexType.
///
/// @note struct _ns1__filesInCertainProgLanguageResponse1 operations:
/// - _ns1__filesInCertainProgLanguageResponse1* soap_new__ns1__filesInCertainProgLanguageResponse1(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__filesInCertainProgLanguageResponse1(struct soap*, _ns1__filesInCertainProgLanguageResponse1*) default initialize members
/// - int soap_read__ns1__filesInCertainProgLanguageResponse1(struct soap*, _ns1__filesInCertainProgLanguageResponse1*) deserialize from a source
/// - int soap_write__ns1__filesInCertainProgLanguageResponse1(struct soap*, _ns1__filesInCertainProgLanguageResponse1*) serialize to a sink
/// - _ns1__filesInCertainProgLanguageResponse1* soap_dup__ns1__filesInCertainProgLanguageResponse1(struct soap*, _ns1__filesInCertainProgLanguageResponse1* dst, _ns1__filesInCertainProgLanguageResponse1 *src) returns deep copy of _ns1__filesInCertainProgLanguageResponse1 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__filesInCertainProgLanguageResponse1(_ns1__filesInCertainProgLanguageResponse1*) deep deletes _ns1__filesInCertainProgLanguageResponse1 data members, use only on dst after soap_dup__ns1__filesInCertainProgLanguageResponse1(NULL, _ns1__filesInCertainProgLanguageResponse1 *dst, _ns1__filesInCertainProgLanguageResponse1 *src) (use soapcpp2 -Ed)
struct _ns1__filesInCertainProgLanguageResponse1
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":largestServFile
/// @brief "http://www.example.org/operations/":largestServFile is a complexType.
///
/// @note struct _ns1__largestServFile operations:
/// - _ns1__largestServFile* soap_new__ns1__largestServFile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__largestServFile(struct soap*, _ns1__largestServFile*) default initialize members
/// - int soap_read__ns1__largestServFile(struct soap*, _ns1__largestServFile*) deserialize from a source
/// - int soap_write__ns1__largestServFile(struct soap*, _ns1__largestServFile*) serialize to a sink
/// - _ns1__largestServFile* soap_dup__ns1__largestServFile(struct soap*, _ns1__largestServFile* dst, _ns1__largestServFile *src) returns deep copy of _ns1__largestServFile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__largestServFile(_ns1__largestServFile*) deep deletes _ns1__largestServFile data members, use only on dst after soap_dup__ns1__largestServFile(NULL, _ns1__largestServFile *dst, _ns1__largestServFile *src) (use soapcpp2 -Ed)
struct _ns1__largestServFile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":largestServFileResponse1
/// @brief "http://www.example.org/operations/":largestServFileResponse1 is a complexType.
///
/// @note struct _ns1__largestServFileResponse1 operations:
/// - _ns1__largestServFileResponse1* soap_new__ns1__largestServFileResponse1(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__largestServFileResponse1(struct soap*, _ns1__largestServFileResponse1*) default initialize members
/// - int soap_read__ns1__largestServFileResponse1(struct soap*, _ns1__largestServFileResponse1*) deserialize from a source
/// - int soap_write__ns1__largestServFileResponse1(struct soap*, _ns1__largestServFileResponse1*) serialize to a sink
/// - _ns1__largestServFileResponse1* soap_dup__ns1__largestServFileResponse1(struct soap*, _ns1__largestServFileResponse1* dst, _ns1__largestServFileResponse1 *src) returns deep copy of _ns1__largestServFileResponse1 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__largestServFileResponse1(_ns1__largestServFileResponse1*) deep deletes _ns1__largestServFileResponse1 data members, use only on dst after soap_dup__ns1__largestServFileResponse1(NULL, _ns1__largestServFileResponse1 *dst, _ns1__largestServFileResponse1 *src) (use soapcpp2 -Ed)
struct _ns1__largestServFileResponse1
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":smallestServFile
/// @brief "http://www.example.org/operations/":smallestServFile is a complexType.
///
/// @note struct _ns1__smallestServFile operations:
/// - _ns1__smallestServFile* soap_new__ns1__smallestServFile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__smallestServFile(struct soap*, _ns1__smallestServFile*) default initialize members
/// - int soap_read__ns1__smallestServFile(struct soap*, _ns1__smallestServFile*) deserialize from a source
/// - int soap_write__ns1__smallestServFile(struct soap*, _ns1__smallestServFile*) serialize to a sink
/// - _ns1__smallestServFile* soap_dup__ns1__smallestServFile(struct soap*, _ns1__smallestServFile* dst, _ns1__smallestServFile *src) returns deep copy of _ns1__smallestServFile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__smallestServFile(_ns1__smallestServFile*) deep deletes _ns1__smallestServFile data members, use only on dst after soap_dup__ns1__smallestServFile(NULL, _ns1__smallestServFile *dst, _ns1__smallestServFile *src) (use soapcpp2 -Ed)
struct _ns1__smallestServFile
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":smallestServFileResponse1
/// @brief "http://www.example.org/operations/":smallestServFileResponse1 is a complexType.
///
/// @note struct _ns1__smallestServFileResponse1 operations:
/// - _ns1__smallestServFileResponse1* soap_new__ns1__smallestServFileResponse1(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__smallestServFileResponse1(struct soap*, _ns1__smallestServFileResponse1*) default initialize members
/// - int soap_read__ns1__smallestServFileResponse1(struct soap*, _ns1__smallestServFileResponse1*) deserialize from a source
/// - int soap_write__ns1__smallestServFileResponse1(struct soap*, _ns1__smallestServFileResponse1*) serialize to a sink
/// - _ns1__smallestServFileResponse1* soap_dup__ns1__smallestServFileResponse1(struct soap*, _ns1__smallestServFileResponse1* dst, _ns1__smallestServFileResponse1 *src) returns deep copy of _ns1__smallestServFileResponse1 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__smallestServFileResponse1(_ns1__smallestServFileResponse1*) deep deletes _ns1__smallestServFileResponse1 data members, use only on dst after soap_dup__ns1__smallestServFileResponse1(NULL, _ns1__smallestServFileResponse1 *dst, _ns1__smallestServFileResponse1 *src) (use soapcpp2 -Ed)
struct _ns1__smallestServFileResponse1
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":filesStatistics
/// @brief "http://www.example.org/operations/":filesStatistics is a complexType.
///
/// @note struct _ns1__filesStatistics operations:
/// - _ns1__filesStatistics* soap_new__ns1__filesStatistics(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__filesStatistics(struct soap*, _ns1__filesStatistics*) default initialize members
/// - int soap_read__ns1__filesStatistics(struct soap*, _ns1__filesStatistics*) deserialize from a source
/// - int soap_write__ns1__filesStatistics(struct soap*, _ns1__filesStatistics*) serialize to a sink
/// - _ns1__filesStatistics* soap_dup__ns1__filesStatistics(struct soap*, _ns1__filesStatistics* dst, _ns1__filesStatistics *src) returns deep copy of _ns1__filesStatistics src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__filesStatistics(_ns1__filesStatistics*) deep deletes _ns1__filesStatistics data members, use only on dst after soap_dup__ns1__filesStatistics(NULL, _ns1__filesStatistics *dst, _ns1__filesStatistics *src) (use soapcpp2 -Ed)
struct _ns1__filesStatistics
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":filesStatisticsResponse1
/// @brief "http://www.example.org/operations/":filesStatisticsResponse1 is a complexType.
///
/// @note struct _ns1__filesStatisticsResponse1 operations:
/// - _ns1__filesStatisticsResponse1* soap_new__ns1__filesStatisticsResponse1(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__filesStatisticsResponse1(struct soap*, _ns1__filesStatisticsResponse1*) default initialize members
/// - int soap_read__ns1__filesStatisticsResponse1(struct soap*, _ns1__filesStatisticsResponse1*) deserialize from a source
/// - int soap_write__ns1__filesStatisticsResponse1(struct soap*, _ns1__filesStatisticsResponse1*) serialize to a sink
/// - _ns1__filesStatisticsResponse1* soap_dup__ns1__filesStatisticsResponse1(struct soap*, _ns1__filesStatisticsResponse1* dst, _ns1__filesStatisticsResponse1 *src) returns deep copy of _ns1__filesStatisticsResponse1 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__filesStatisticsResponse1(_ns1__filesStatisticsResponse1*) deep deletes _ns1__filesStatisticsResponse1 data members, use only on dst after soap_dup__ns1__filesStatisticsResponse1(NULL, _ns1__filesStatisticsResponse1 *dst, _ns1__filesStatisticsResponse1 *src) (use soapcpp2 -Ed)
struct _ns1__filesStatisticsResponse1
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":totalServFilesSize
/// @brief "http://www.example.org/operations/":totalServFilesSize is a complexType.
///
/// @note struct _ns1__totalServFilesSize operations:
/// - _ns1__totalServFilesSize* soap_new__ns1__totalServFilesSize(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__totalServFilesSize(struct soap*, _ns1__totalServFilesSize*) default initialize members
/// - int soap_read__ns1__totalServFilesSize(struct soap*, _ns1__totalServFilesSize*) deserialize from a source
/// - int soap_write__ns1__totalServFilesSize(struct soap*, _ns1__totalServFilesSize*) serialize to a sink
/// - _ns1__totalServFilesSize* soap_dup__ns1__totalServFilesSize(struct soap*, _ns1__totalServFilesSize* dst, _ns1__totalServFilesSize *src) returns deep copy of _ns1__totalServFilesSize src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__totalServFilesSize(_ns1__totalServFilesSize*) deep deletes _ns1__totalServFilesSize data members, use only on dst after soap_dup__ns1__totalServFilesSize(NULL, _ns1__totalServFilesSize *dst, _ns1__totalServFilesSize *src) (use soapcpp2 -Ed)
struct _ns1__totalServFilesSize
{
/// Element "in" of type xs:string.
    char*                                in                             1;	///< Required element.
};

/// @brief Top-level root element "http://www.example.org/operations/":totalServFilesSizeResponse1
/// @brief "http://www.example.org/operations/":totalServFilesSizeResponse1 is a complexType.
///
/// @note struct _ns1__totalServFilesSizeResponse1 operations:
/// - _ns1__totalServFilesSizeResponse1* soap_new__ns1__totalServFilesSizeResponse1(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__totalServFilesSizeResponse1(struct soap*, _ns1__totalServFilesSizeResponse1*) default initialize members
/// - int soap_read__ns1__totalServFilesSizeResponse1(struct soap*, _ns1__totalServFilesSizeResponse1*) deserialize from a source
/// - int soap_write__ns1__totalServFilesSizeResponse1(struct soap*, _ns1__totalServFilesSizeResponse1*) serialize to a sink
/// - _ns1__totalServFilesSizeResponse1* soap_dup__ns1__totalServFilesSizeResponse1(struct soap*, _ns1__totalServFilesSizeResponse1* dst, _ns1__totalServFilesSizeResponse1 *src) returns deep copy of _ns1__totalServFilesSizeResponse1 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__totalServFilesSizeResponse1(_ns1__totalServFilesSizeResponse1*) deep deletes _ns1__totalServFilesSizeResponse1 data members, use only on dst after soap_dup__ns1__totalServFilesSizeResponse1(NULL, _ns1__totalServFilesSizeResponse1 *dst, _ns1__totalServFilesSizeResponse1 *src) (use soapcpp2 -Ed)
struct _ns1__totalServFilesSizeResponse1
{
/// Element "out" of type xs:string.
    char*                                out                            1;	///< Required element.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.example.org/operations/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.example.org/operations/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	operationsSOAP 
//gsoap ns1  service type:	operations 
//gsoap ns1  service port:	http://localhost:8889 
//gsoap ns1  service namespace:	http://www.example.org/operations/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage operations Definitions

@section operations_bindings Service Bindings

  - @ref operationsSOAP

@section operations_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page operationsSOAP Binding "operationsSOAP"

@section operationsSOAP_operations Operations of Binding "operationsSOAP"

  - @ref __ns1__storeFile

@section operationsSOAP_ports Default endpoints of Binding "operationsSOAP"

  - http://localhost:8889

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   operationsSOAP                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__storeFile                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__storeFile" of service binding "operationsSOAP".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8889

  - Default SOAP action or REST location path:
    - "http://www.example.org/operations/storeFile"

  - Addressing input action: "http://www.example.org/operations/storeFile"

  - Addressing output action: "http://www.example.org/operations/storeFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__storeFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns1__storeFile*             ns1__storeFile,
    // output parameters:
    struct _ns1__storeFileResponse     *ns1__storeFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__storeFile(
    struct soap *soap,
    // input parameters:
    struct _ns1__storeFile*             ns1__storeFile,
    // output parameters:
    struct _ns1__storeFileResponse     *ns1__storeFileResponse
  );
@endcode

*/

//gsoap ns1  service method-protocol:	storeFile SOAP
//gsoap ns1  service method-style:	storeFile document
//gsoap ns1  service method-encoding:	storeFile literal
//gsoap ns1  service method-input-action:	storeFile http://www.example.org/operations/storeFile
//gsoap ns1  service method-output-action:	storeFile http://www.example.org/operations/storeFileResponse
int __ns1__storeFile(
    struct _ns1__storeFile*             ns1__storeFile,	///< Input parameter
    struct _ns1__storeFileResponse     *ns1__storeFileResponse	///< Output parameter
);

/** @page operationsSOAP Binding "operationsSOAP"

@section operationsSOAP_policy_enablers Policy Enablers of Binding "operationsSOAP"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns1 Top-level root elements of schema "http://www.example.org/operations/"

  - <ns1:storeFile> @ref _ns1__storeFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__storeFile(struct soap*, struct _ns1__storeFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__storeFile(struct soap*, struct _ns1__storeFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__storeFile(struct soap*, const char *URL, struct _ns1__storeFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__storeFile(struct soap*, const char *URL, struct _ns1__storeFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__storeFile(struct soap*, const char *URL, struct _ns1__storeFile*);
    soap_POST_recv__ns1__storeFile(struct soap*, struct _ns1__storeFile*);
    @endcode

  - <ns1:storeFileResponse> @ref _ns1__storeFileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__storeFileResponse(struct soap*, struct _ns1__storeFileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__storeFileResponse(struct soap*, struct _ns1__storeFileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__storeFileResponse(struct soap*, const char *URL, struct _ns1__storeFileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__storeFileResponse(struct soap*, const char *URL, struct _ns1__storeFileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__storeFileResponse(struct soap*, const char *URL, struct _ns1__storeFileResponse*);
    soap_POST_recv__ns1__storeFileResponse(struct soap*, struct _ns1__storeFileResponse*);
    @endcode

  - <ns1:createFile> @ref _ns1__createFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__createFile(struct soap*, struct _ns1__createFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__createFile(struct soap*, struct _ns1__createFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__createFile(struct soap*, const char *URL, struct _ns1__createFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__createFile(struct soap*, const char *URL, struct _ns1__createFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__createFile(struct soap*, const char *URL, struct _ns1__createFile*);
    soap_POST_recv__ns1__createFile(struct soap*, struct _ns1__createFile*);
    @endcode

  - <ns1:createFileResponse> @ref _ns1__createFileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__createFileResponse(struct soap*, struct _ns1__createFileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__createFileResponse(struct soap*, struct _ns1__createFileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__createFileResponse(struct soap*, const char *URL, struct _ns1__createFileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__createFileResponse(struct soap*, const char *URL, struct _ns1__createFileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__createFileResponse(struct soap*, const char *URL, struct _ns1__createFileResponse*);
    soap_POST_recv__ns1__createFileResponse(struct soap*, struct _ns1__createFileResponse*);
    @endcode

  - <ns1:modifyFile> @ref _ns1__modifyFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__modifyFile(struct soap*, struct _ns1__modifyFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__modifyFile(struct soap*, struct _ns1__modifyFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__modifyFile(struct soap*, const char *URL, struct _ns1__modifyFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__modifyFile(struct soap*, const char *URL, struct _ns1__modifyFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__modifyFile(struct soap*, const char *URL, struct _ns1__modifyFile*);
    soap_POST_recv__ns1__modifyFile(struct soap*, struct _ns1__modifyFile*);
    @endcode

  - <ns1:modifyFileResponse> @ref _ns1__modifyFileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__modifyFileResponse(struct soap*, struct _ns1__modifyFileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__modifyFileResponse(struct soap*, struct _ns1__modifyFileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__modifyFileResponse(struct soap*, const char *URL, struct _ns1__modifyFileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__modifyFileResponse(struct soap*, const char *URL, struct _ns1__modifyFileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__modifyFileResponse(struct soap*, const char *URL, struct _ns1__modifyFileResponse*);
    soap_POST_recv__ns1__modifyFileResponse(struct soap*, struct _ns1__modifyFileResponse*);
    @endcode

  - <ns1:removeFile> @ref _ns1__removeFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__removeFile(struct soap*, struct _ns1__removeFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__removeFile(struct soap*, struct _ns1__removeFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__removeFile(struct soap*, const char *URL, struct _ns1__removeFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__removeFile(struct soap*, const char *URL, struct _ns1__removeFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__removeFile(struct soap*, const char *URL, struct _ns1__removeFile*);
    soap_POST_recv__ns1__removeFile(struct soap*, struct _ns1__removeFile*);
    @endcode

  - <ns1:removeFileResponse> @ref _ns1__removeFileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__removeFileResponse(struct soap*, struct _ns1__removeFileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__removeFileResponse(struct soap*, struct _ns1__removeFileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__removeFileResponse(struct soap*, const char *URL, struct _ns1__removeFileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__removeFileResponse(struct soap*, const char *URL, struct _ns1__removeFileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__removeFileResponse(struct soap*, const char *URL, struct _ns1__removeFileResponse*);
    soap_POST_recv__ns1__removeFileResponse(struct soap*, struct _ns1__removeFileResponse*);
    @endcode

  - <ns1:store_exec_file> @ref _ns1__store_USCOREexec_USCOREfile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__store_USCOREexec_USCOREfile(struct soap*, struct _ns1__store_USCOREexec_USCOREfile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__store_USCOREexec_USCOREfile(struct soap*, struct _ns1__store_USCOREexec_USCOREfile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__store_USCOREexec_USCOREfile(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__store_USCOREexec_USCOREfile(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__store_USCOREexec_USCOREfile(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfile*);
    soap_POST_recv__ns1__store_USCOREexec_USCOREfile(struct soap*, struct _ns1__store_USCOREexec_USCOREfile*);
    @endcode

  - <ns1:store_exec_fileResponse> @ref _ns1__store_USCOREexec_USCOREfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, const char *URL, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    soap_POST_recv__ns1__store_USCOREexec_USCOREfileResponse(struct soap*, struct _ns1__store_USCOREexec_USCOREfileResponse*);
    @endcode

  - <ns1:clientLogFiles> @ref _ns1__clientLogFiles
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__clientLogFiles(struct soap*, struct _ns1__clientLogFiles*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__clientLogFiles(struct soap*, struct _ns1__clientLogFiles*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__clientLogFiles(struct soap*, const char *URL, struct _ns1__clientLogFiles*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__clientLogFiles(struct soap*, const char *URL, struct _ns1__clientLogFiles*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__clientLogFiles(struct soap*, const char *URL, struct _ns1__clientLogFiles*);
    soap_POST_recv__ns1__clientLogFiles(struct soap*, struct _ns1__clientLogFiles*);
    @endcode

  - <ns1:NewOperationResponse> @ref _ns1__NewOperationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__NewOperationResponse(struct soap*, struct _ns1__NewOperationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__NewOperationResponse(struct soap*, struct _ns1__NewOperationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__NewOperationResponse(struct soap*, const char *URL, struct _ns1__NewOperationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__NewOperationResponse(struct soap*, const char *URL, struct _ns1__NewOperationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__NewOperationResponse(struct soap*, const char *URL, struct _ns1__NewOperationResponse*);
    soap_POST_recv__ns1__NewOperationResponse(struct soap*, struct _ns1__NewOperationResponse*);
    @endcode

  - <ns1:clientLogFilesResponse1> @ref _ns1__clientLogFilesResponse1
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__clientLogFilesResponse1(struct soap*, struct _ns1__clientLogFilesResponse1*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__clientLogFilesResponse1(struct soap*, struct _ns1__clientLogFilesResponse1*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__clientLogFilesResponse1(struct soap*, const char *URL, struct _ns1__clientLogFilesResponse1*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__clientLogFilesResponse1(struct soap*, const char *URL, struct _ns1__clientLogFilesResponse1*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__clientLogFilesResponse1(struct soap*, const char *URL, struct _ns1__clientLogFilesResponse1*);
    soap_POST_recv__ns1__clientLogFilesResponse1(struct soap*, struct _ns1__clientLogFilesResponse1*);
    @endcode

  - <ns1:servFiles> @ref _ns1__servFiles
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__servFiles(struct soap*, struct _ns1__servFiles*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__servFiles(struct soap*, struct _ns1__servFiles*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__servFiles(struct soap*, const char *URL, struct _ns1__servFiles*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__servFiles(struct soap*, const char *URL, struct _ns1__servFiles*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__servFiles(struct soap*, const char *URL, struct _ns1__servFiles*);
    soap_POST_recv__ns1__servFiles(struct soap*, struct _ns1__servFiles*);
    @endcode

  - <ns1:servFilesResponse1> @ref _ns1__servFilesResponse1
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__servFilesResponse1(struct soap*, struct _ns1__servFilesResponse1*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__servFilesResponse1(struct soap*, struct _ns1__servFilesResponse1*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__servFilesResponse1(struct soap*, const char *URL, struct _ns1__servFilesResponse1*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__servFilesResponse1(struct soap*, const char *URL, struct _ns1__servFilesResponse1*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__servFilesResponse1(struct soap*, const char *URL, struct _ns1__servFilesResponse1*);
    soap_POST_recv__ns1__servFilesResponse1(struct soap*, struct _ns1__servFilesResponse1*);
    @endcode

  - <ns1:filesInCertainProgLanguage> @ref _ns1__filesInCertainProgLanguage
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__filesInCertainProgLanguage(struct soap*, struct _ns1__filesInCertainProgLanguage*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__filesInCertainProgLanguage(struct soap*, struct _ns1__filesInCertainProgLanguage*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__filesInCertainProgLanguage(struct soap*, const char *URL, struct _ns1__filesInCertainProgLanguage*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__filesInCertainProgLanguage(struct soap*, const char *URL, struct _ns1__filesInCertainProgLanguage*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__filesInCertainProgLanguage(struct soap*, const char *URL, struct _ns1__filesInCertainProgLanguage*);
    soap_POST_recv__ns1__filesInCertainProgLanguage(struct soap*, struct _ns1__filesInCertainProgLanguage*);
    @endcode

  - <ns1:filesInCertainProgLanguageResponse1> @ref _ns1__filesInCertainProgLanguageResponse1
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__filesInCertainProgLanguageResponse1(struct soap*, struct _ns1__filesInCertainProgLanguageResponse1*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__filesInCertainProgLanguageResponse1(struct soap*, struct _ns1__filesInCertainProgLanguageResponse1*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__filesInCertainProgLanguageResponse1(struct soap*, const char *URL, struct _ns1__filesInCertainProgLanguageResponse1*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__filesInCertainProgLanguageResponse1(struct soap*, const char *URL, struct _ns1__filesInCertainProgLanguageResponse1*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__filesInCertainProgLanguageResponse1(struct soap*, const char *URL, struct _ns1__filesInCertainProgLanguageResponse1*);
    soap_POST_recv__ns1__filesInCertainProgLanguageResponse1(struct soap*, struct _ns1__filesInCertainProgLanguageResponse1*);
    @endcode

  - <ns1:largestServFile> @ref _ns1__largestServFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__largestServFile(struct soap*, struct _ns1__largestServFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__largestServFile(struct soap*, struct _ns1__largestServFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__largestServFile(struct soap*, const char *URL, struct _ns1__largestServFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__largestServFile(struct soap*, const char *URL, struct _ns1__largestServFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__largestServFile(struct soap*, const char *URL, struct _ns1__largestServFile*);
    soap_POST_recv__ns1__largestServFile(struct soap*, struct _ns1__largestServFile*);
    @endcode

  - <ns1:largestServFileResponse1> @ref _ns1__largestServFileResponse1
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__largestServFileResponse1(struct soap*, struct _ns1__largestServFileResponse1*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__largestServFileResponse1(struct soap*, struct _ns1__largestServFileResponse1*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__largestServFileResponse1(struct soap*, const char *URL, struct _ns1__largestServFileResponse1*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__largestServFileResponse1(struct soap*, const char *URL, struct _ns1__largestServFileResponse1*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__largestServFileResponse1(struct soap*, const char *URL, struct _ns1__largestServFileResponse1*);
    soap_POST_recv__ns1__largestServFileResponse1(struct soap*, struct _ns1__largestServFileResponse1*);
    @endcode

  - <ns1:smallestServFile> @ref _ns1__smallestServFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__smallestServFile(struct soap*, struct _ns1__smallestServFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__smallestServFile(struct soap*, struct _ns1__smallestServFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__smallestServFile(struct soap*, const char *URL, struct _ns1__smallestServFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__smallestServFile(struct soap*, const char *URL, struct _ns1__smallestServFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__smallestServFile(struct soap*, const char *URL, struct _ns1__smallestServFile*);
    soap_POST_recv__ns1__smallestServFile(struct soap*, struct _ns1__smallestServFile*);
    @endcode

  - <ns1:smallestServFileResponse1> @ref _ns1__smallestServFileResponse1
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__smallestServFileResponse1(struct soap*, struct _ns1__smallestServFileResponse1*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__smallestServFileResponse1(struct soap*, struct _ns1__smallestServFileResponse1*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__smallestServFileResponse1(struct soap*, const char *URL, struct _ns1__smallestServFileResponse1*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__smallestServFileResponse1(struct soap*, const char *URL, struct _ns1__smallestServFileResponse1*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__smallestServFileResponse1(struct soap*, const char *URL, struct _ns1__smallestServFileResponse1*);
    soap_POST_recv__ns1__smallestServFileResponse1(struct soap*, struct _ns1__smallestServFileResponse1*);
    @endcode

  - <ns1:filesStatistics> @ref _ns1__filesStatistics
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__filesStatistics(struct soap*, struct _ns1__filesStatistics*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__filesStatistics(struct soap*, struct _ns1__filesStatistics*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__filesStatistics(struct soap*, const char *URL, struct _ns1__filesStatistics*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__filesStatistics(struct soap*, const char *URL, struct _ns1__filesStatistics*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__filesStatistics(struct soap*, const char *URL, struct _ns1__filesStatistics*);
    soap_POST_recv__ns1__filesStatistics(struct soap*, struct _ns1__filesStatistics*);
    @endcode

  - <ns1:filesStatisticsResponse1> @ref _ns1__filesStatisticsResponse1
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__filesStatisticsResponse1(struct soap*, struct _ns1__filesStatisticsResponse1*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__filesStatisticsResponse1(struct soap*, struct _ns1__filesStatisticsResponse1*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__filesStatisticsResponse1(struct soap*, const char *URL, struct _ns1__filesStatisticsResponse1*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__filesStatisticsResponse1(struct soap*, const char *URL, struct _ns1__filesStatisticsResponse1*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__filesStatisticsResponse1(struct soap*, const char *URL, struct _ns1__filesStatisticsResponse1*);
    soap_POST_recv__ns1__filesStatisticsResponse1(struct soap*, struct _ns1__filesStatisticsResponse1*);
    @endcode

  - <ns1:totalServFilesSize> @ref _ns1__totalServFilesSize
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__totalServFilesSize(struct soap*, struct _ns1__totalServFilesSize*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__totalServFilesSize(struct soap*, struct _ns1__totalServFilesSize*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__totalServFilesSize(struct soap*, const char *URL, struct _ns1__totalServFilesSize*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__totalServFilesSize(struct soap*, const char *URL, struct _ns1__totalServFilesSize*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__totalServFilesSize(struct soap*, const char *URL, struct _ns1__totalServFilesSize*);
    soap_POST_recv__ns1__totalServFilesSize(struct soap*, struct _ns1__totalServFilesSize*);
    @endcode

  - <ns1:totalServFilesSizeResponse1> @ref _ns1__totalServFilesSizeResponse1
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__totalServFilesSizeResponse1(struct soap*, struct _ns1__totalServFilesSizeResponse1*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__totalServFilesSizeResponse1(struct soap*, struct _ns1__totalServFilesSizeResponse1*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__totalServFilesSizeResponse1(struct soap*, const char *URL, struct _ns1__totalServFilesSizeResponse1*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__totalServFilesSizeResponse1(struct soap*, const char *URL, struct _ns1__totalServFilesSizeResponse1*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__totalServFilesSizeResponse1(struct soap*, const char *URL, struct _ns1__totalServFilesSizeResponse1*);
    soap_POST_recv__ns1__totalServFilesSizeResponse1(struct soap*, struct _ns1__totalServFilesSizeResponse1*);
    @endcode

*/

/* End of test.h */
