/* soapC.cpp
   Generated by gSOAP 2.8.122 for test.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.122 2022-06-14 17:01:34 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	if (!soap->fault)
		return NULL;
	if (soap->version == 2)
		return soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode ? soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value : NULL;
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__storeFile:
		return soap_in_PointerTo_ns1__storeFile(soap, tag, NULL, "ns1:storeFile");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:totalServFilesSizeResponse1"))
		{	*type = SOAP_TYPE__ns1__totalServFilesSizeResponse1;
			return soap_in__ns1__totalServFilesSizeResponse1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:totalServFilesSize"))
		{	*type = SOAP_TYPE__ns1__totalServFilesSize;
			return soap_in__ns1__totalServFilesSize(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:filesStatisticsResponse1"))
		{	*type = SOAP_TYPE__ns1__filesStatisticsResponse1;
			return soap_in__ns1__filesStatisticsResponse1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:filesStatistics"))
		{	*type = SOAP_TYPE__ns1__filesStatistics;
			return soap_in__ns1__filesStatistics(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:smallestServFileResponse1"))
		{	*type = SOAP_TYPE__ns1__smallestServFileResponse1;
			return soap_in__ns1__smallestServFileResponse1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:smallestServFile"))
		{	*type = SOAP_TYPE__ns1__smallestServFile;
			return soap_in__ns1__smallestServFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:largestServFileResponse1"))
		{	*type = SOAP_TYPE__ns1__largestServFileResponse1;
			return soap_in__ns1__largestServFileResponse1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:largestServFile"))
		{	*type = SOAP_TYPE__ns1__largestServFile;
			return soap_in__ns1__largestServFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:filesInCertainProgLanguageResponse1"))
		{	*type = SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1;
			return soap_in__ns1__filesInCertainProgLanguageResponse1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:filesInCertainProgLanguage"))
		{	*type = SOAP_TYPE__ns1__filesInCertainProgLanguage;
			return soap_in__ns1__filesInCertainProgLanguage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:servFilesResponse1"))
		{	*type = SOAP_TYPE__ns1__servFilesResponse1;
			return soap_in__ns1__servFilesResponse1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:servFiles"))
		{	*type = SOAP_TYPE__ns1__servFiles;
			return soap_in__ns1__servFiles(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:clientLogFilesResponse1"))
		{	*type = SOAP_TYPE__ns1__clientLogFilesResponse1;
			return soap_in__ns1__clientLogFilesResponse1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NewOperationResponse"))
		{	*type = SOAP_TYPE__ns1__NewOperationResponse;
			return soap_in__ns1__NewOperationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:clientLogFiles"))
		{	*type = SOAP_TYPE__ns1__clientLogFiles;
			return soap_in__ns1__clientLogFiles(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:store_exec_fileResponse"))
		{	*type = SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse;
			return soap_in__ns1__store_USCOREexec_USCOREfileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:store_exec_file"))
		{	*type = SOAP_TYPE__ns1__store_USCOREexec_USCOREfile;
			return soap_in__ns1__store_USCOREexec_USCOREfile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:removeFileResponse"))
		{	*type = SOAP_TYPE__ns1__removeFileResponse;
			return soap_in__ns1__removeFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:removeFile"))
		{	*type = SOAP_TYPE__ns1__removeFile;
			return soap_in__ns1__removeFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:modifyFileResponse"))
		{	*type = SOAP_TYPE__ns1__modifyFileResponse;
			return soap_in__ns1__modifyFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:modifyFile"))
		{	*type = SOAP_TYPE__ns1__modifyFile;
			return soap_in__ns1__modifyFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:createFileResponse"))
		{	*type = SOAP_TYPE__ns1__createFileResponse;
			return soap_in__ns1__createFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:createFile"))
		{	*type = SOAP_TYPE__ns1__createFile;
			return soap_in__ns1__createFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:storeFileResponse"))
		{	*type = SOAP_TYPE__ns1__storeFileResponse;
			return soap_in__ns1__storeFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:storeFile"))
		{	*type = SOAP_TYPE__ns1__storeFile;
			return soap_in__ns1__storeFile(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__totalServFilesSizeResponse1:
		return ((_ns1__totalServFilesSizeResponse1 *)ptr)->soap_out(soap, "ns1:totalServFilesSizeResponse1", id, "");
	case SOAP_TYPE__ns1__totalServFilesSize:
		return ((_ns1__totalServFilesSize *)ptr)->soap_out(soap, "ns1:totalServFilesSize", id, "");
	case SOAP_TYPE__ns1__filesStatisticsResponse1:
		return ((_ns1__filesStatisticsResponse1 *)ptr)->soap_out(soap, "ns1:filesStatisticsResponse1", id, "");
	case SOAP_TYPE__ns1__filesStatistics:
		return ((_ns1__filesStatistics *)ptr)->soap_out(soap, "ns1:filesStatistics", id, "");
	case SOAP_TYPE__ns1__smallestServFileResponse1:
		return ((_ns1__smallestServFileResponse1 *)ptr)->soap_out(soap, "ns1:smallestServFileResponse1", id, "");
	case SOAP_TYPE__ns1__smallestServFile:
		return ((_ns1__smallestServFile *)ptr)->soap_out(soap, "ns1:smallestServFile", id, "");
	case SOAP_TYPE__ns1__largestServFileResponse1:
		return ((_ns1__largestServFileResponse1 *)ptr)->soap_out(soap, "ns1:largestServFileResponse1", id, "");
	case SOAP_TYPE__ns1__largestServFile:
		return ((_ns1__largestServFile *)ptr)->soap_out(soap, "ns1:largestServFile", id, "");
	case SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1:
		return ((_ns1__filesInCertainProgLanguageResponse1 *)ptr)->soap_out(soap, "ns1:filesInCertainProgLanguageResponse1", id, "");
	case SOAP_TYPE__ns1__filesInCertainProgLanguage:
		return ((_ns1__filesInCertainProgLanguage *)ptr)->soap_out(soap, "ns1:filesInCertainProgLanguage", id, "");
	case SOAP_TYPE__ns1__servFilesResponse1:
		return ((_ns1__servFilesResponse1 *)ptr)->soap_out(soap, "ns1:servFilesResponse1", id, "");
	case SOAP_TYPE__ns1__servFiles:
		return ((_ns1__servFiles *)ptr)->soap_out(soap, "ns1:servFiles", id, "");
	case SOAP_TYPE__ns1__clientLogFilesResponse1:
		return ((_ns1__clientLogFilesResponse1 *)ptr)->soap_out(soap, "ns1:clientLogFilesResponse1", id, "");
	case SOAP_TYPE__ns1__NewOperationResponse:
		return ((_ns1__NewOperationResponse *)ptr)->soap_out(soap, "ns1:NewOperationResponse", id, "");
	case SOAP_TYPE__ns1__clientLogFiles:
		return ((_ns1__clientLogFiles *)ptr)->soap_out(soap, "ns1:clientLogFiles", id, "");
	case SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse:
		return ((_ns1__store_USCOREexec_USCOREfileResponse *)ptr)->soap_out(soap, "ns1:store_exec_fileResponse", id, "");
	case SOAP_TYPE__ns1__store_USCOREexec_USCOREfile:
		return ((_ns1__store_USCOREexec_USCOREfile *)ptr)->soap_out(soap, "ns1:store_exec_file", id, "");
	case SOAP_TYPE__ns1__removeFileResponse:
		return ((_ns1__removeFileResponse *)ptr)->soap_out(soap, "ns1:removeFileResponse", id, "");
	case SOAP_TYPE__ns1__removeFile:
		return ((_ns1__removeFile *)ptr)->soap_out(soap, "ns1:removeFile", id, "");
	case SOAP_TYPE__ns1__modifyFileResponse:
		return ((_ns1__modifyFileResponse *)ptr)->soap_out(soap, "ns1:modifyFileResponse", id, "");
	case SOAP_TYPE__ns1__modifyFile:
		return ((_ns1__modifyFile *)ptr)->soap_out(soap, "ns1:modifyFile", id, "");
	case SOAP_TYPE__ns1__createFileResponse:
		return ((_ns1__createFileResponse *)ptr)->soap_out(soap, "ns1:createFileResponse", id, "");
	case SOAP_TYPE__ns1__createFile:
		return ((_ns1__createFile *)ptr)->soap_out(soap, "ns1:createFile", id, "");
	case SOAP_TYPE__ns1__storeFileResponse:
		return ((_ns1__storeFileResponse *)ptr)->soap_out(soap, "ns1:storeFileResponse", id, "");
	case SOAP_TYPE__ns1__storeFile:
		return ((_ns1__storeFile *)ptr)->soap_out(soap, "ns1:storeFile", id, "");
	case SOAP_TYPE_PointerTo_ns1__storeFile:
		return soap_out_PointerTo_ns1__storeFile(soap, tag, id, (_ns1__storeFile *const*)ptr, "ns1:storeFile");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag, 0, NULL); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__totalServFilesSizeResponse1:
		((_ns1__totalServFilesSizeResponse1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__totalServFilesSize:
		((_ns1__totalServFilesSize *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__filesStatisticsResponse1:
		((_ns1__filesStatisticsResponse1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__filesStatistics:
		((_ns1__filesStatistics *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__smallestServFileResponse1:
		((_ns1__smallestServFileResponse1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__smallestServFile:
		((_ns1__smallestServFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__largestServFileResponse1:
		((_ns1__largestServFileResponse1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__largestServFile:
		((_ns1__largestServFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1:
		((_ns1__filesInCertainProgLanguageResponse1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__filesInCertainProgLanguage:
		((_ns1__filesInCertainProgLanguage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__servFilesResponse1:
		((_ns1__servFilesResponse1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__servFiles:
		((_ns1__servFiles *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__clientLogFilesResponse1:
		((_ns1__clientLogFilesResponse1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__NewOperationResponse:
		((_ns1__NewOperationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__clientLogFiles:
		((_ns1__clientLogFiles *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse:
		((_ns1__store_USCOREexec_USCOREfileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__store_USCOREexec_USCOREfile:
		((_ns1__store_USCOREexec_USCOREfile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__removeFileResponse:
		((_ns1__removeFileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__removeFile:
		((_ns1__removeFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__modifyFileResponse:
		((_ns1__modifyFileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__modifyFile:
		((_ns1__modifyFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__createFileResponse:
		((_ns1__createFileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__createFile:
		((_ns1__createFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__storeFileResponse:
		((_ns1__storeFileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__storeFile:
		((_ns1__storeFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__storeFile:
		soap_serialize___ns1__storeFile(soap, (const struct __ns1__storeFile *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__storeFile:
		soap_serialize_PointerTo_ns1__storeFile(soap, (_ns1__storeFile *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__storeFile:
		return (void*)soap_instantiate__ns1__storeFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__storeFileResponse:
		return (void*)soap_instantiate__ns1__storeFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__createFile:
		return (void*)soap_instantiate__ns1__createFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__createFileResponse:
		return (void*)soap_instantiate__ns1__createFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__modifyFile:
		return (void*)soap_instantiate__ns1__modifyFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__modifyFileResponse:
		return (void*)soap_instantiate__ns1__modifyFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__removeFile:
		return (void*)soap_instantiate__ns1__removeFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__removeFileResponse:
		return (void*)soap_instantiate__ns1__removeFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__store_USCOREexec_USCOREfile:
		return (void*)soap_instantiate__ns1__store_USCOREexec_USCOREfile(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse:
		return (void*)soap_instantiate__ns1__store_USCOREexec_USCOREfileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__clientLogFiles:
		return (void*)soap_instantiate__ns1__clientLogFiles(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__NewOperationResponse:
		return (void*)soap_instantiate__ns1__NewOperationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__clientLogFilesResponse1:
		return (void*)soap_instantiate__ns1__clientLogFilesResponse1(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__servFiles:
		return (void*)soap_instantiate__ns1__servFiles(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__servFilesResponse1:
		return (void*)soap_instantiate__ns1__servFilesResponse1(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__filesInCertainProgLanguage:
		return (void*)soap_instantiate__ns1__filesInCertainProgLanguage(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1:
		return (void*)soap_instantiate__ns1__filesInCertainProgLanguageResponse1(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__largestServFile:
		return (void*)soap_instantiate__ns1__largestServFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__largestServFileResponse1:
		return (void*)soap_instantiate__ns1__largestServFileResponse1(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__smallestServFile:
		return (void*)soap_instantiate__ns1__smallestServFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__smallestServFileResponse1:
		return (void*)soap_instantiate__ns1__smallestServFileResponse1(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__filesStatistics:
		return (void*)soap_instantiate__ns1__filesStatistics(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__filesStatisticsResponse1:
		return (void*)soap_instantiate__ns1__filesStatisticsResponse1(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__totalServFilesSize:
		return (void*)soap_instantiate__ns1__totalServFilesSize(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__totalServFilesSizeResponse1:
		return (void*)soap_instantiate__ns1__totalServFilesSizeResponse1(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__storeFile:
		return (void*)soap_instantiate___ns1__storeFile(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__ns1__storeFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__storeFile*>(p->ptr), _ns1__storeFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__storeFile*>(p->ptr), _ns1__storeFile);
		break;
	case SOAP_TYPE__ns1__storeFileResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__storeFileResponse*>(p->ptr), _ns1__storeFileResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__storeFileResponse*>(p->ptr), _ns1__storeFileResponse);
		break;
	case SOAP_TYPE__ns1__createFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__createFile*>(p->ptr), _ns1__createFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__createFile*>(p->ptr), _ns1__createFile);
		break;
	case SOAP_TYPE__ns1__createFileResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__createFileResponse*>(p->ptr), _ns1__createFileResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__createFileResponse*>(p->ptr), _ns1__createFileResponse);
		break;
	case SOAP_TYPE__ns1__modifyFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__modifyFile*>(p->ptr), _ns1__modifyFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__modifyFile*>(p->ptr), _ns1__modifyFile);
		break;
	case SOAP_TYPE__ns1__modifyFileResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__modifyFileResponse*>(p->ptr), _ns1__modifyFileResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__modifyFileResponse*>(p->ptr), _ns1__modifyFileResponse);
		break;
	case SOAP_TYPE__ns1__removeFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__removeFile*>(p->ptr), _ns1__removeFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__removeFile*>(p->ptr), _ns1__removeFile);
		break;
	case SOAP_TYPE__ns1__removeFileResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__removeFileResponse*>(p->ptr), _ns1__removeFileResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__removeFileResponse*>(p->ptr), _ns1__removeFileResponse);
		break;
	case SOAP_TYPE__ns1__store_USCOREexec_USCOREfile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__store_USCOREexec_USCOREfile*>(p->ptr), _ns1__store_USCOREexec_USCOREfile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__store_USCOREexec_USCOREfile*>(p->ptr), _ns1__store_USCOREexec_USCOREfile);
		break;
	case SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__store_USCOREexec_USCOREfileResponse*>(p->ptr), _ns1__store_USCOREexec_USCOREfileResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__store_USCOREexec_USCOREfileResponse*>(p->ptr), _ns1__store_USCOREexec_USCOREfileResponse);
		break;
	case SOAP_TYPE__ns1__clientLogFiles:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__clientLogFiles*>(p->ptr), _ns1__clientLogFiles);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__clientLogFiles*>(p->ptr), _ns1__clientLogFiles);
		break;
	case SOAP_TYPE__ns1__NewOperationResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__NewOperationResponse*>(p->ptr), _ns1__NewOperationResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__NewOperationResponse*>(p->ptr), _ns1__NewOperationResponse);
		break;
	case SOAP_TYPE__ns1__clientLogFilesResponse1:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__clientLogFilesResponse1*>(p->ptr), _ns1__clientLogFilesResponse1);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__clientLogFilesResponse1*>(p->ptr), _ns1__clientLogFilesResponse1);
		break;
	case SOAP_TYPE__ns1__servFiles:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__servFiles*>(p->ptr), _ns1__servFiles);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__servFiles*>(p->ptr), _ns1__servFiles);
		break;
	case SOAP_TYPE__ns1__servFilesResponse1:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__servFilesResponse1*>(p->ptr), _ns1__servFilesResponse1);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__servFilesResponse1*>(p->ptr), _ns1__servFilesResponse1);
		break;
	case SOAP_TYPE__ns1__filesInCertainProgLanguage:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__filesInCertainProgLanguage*>(p->ptr), _ns1__filesInCertainProgLanguage);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__filesInCertainProgLanguage*>(p->ptr), _ns1__filesInCertainProgLanguage);
		break;
	case SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__filesInCertainProgLanguageResponse1*>(p->ptr), _ns1__filesInCertainProgLanguageResponse1);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__filesInCertainProgLanguageResponse1*>(p->ptr), _ns1__filesInCertainProgLanguageResponse1);
		break;
	case SOAP_TYPE__ns1__largestServFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__largestServFile*>(p->ptr), _ns1__largestServFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__largestServFile*>(p->ptr), _ns1__largestServFile);
		break;
	case SOAP_TYPE__ns1__largestServFileResponse1:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__largestServFileResponse1*>(p->ptr), _ns1__largestServFileResponse1);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__largestServFileResponse1*>(p->ptr), _ns1__largestServFileResponse1);
		break;
	case SOAP_TYPE__ns1__smallestServFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__smallestServFile*>(p->ptr), _ns1__smallestServFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__smallestServFile*>(p->ptr), _ns1__smallestServFile);
		break;
	case SOAP_TYPE__ns1__smallestServFileResponse1:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__smallestServFileResponse1*>(p->ptr), _ns1__smallestServFileResponse1);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__smallestServFileResponse1*>(p->ptr), _ns1__smallestServFileResponse1);
		break;
	case SOAP_TYPE__ns1__filesStatistics:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__filesStatistics*>(p->ptr), _ns1__filesStatistics);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__filesStatistics*>(p->ptr), _ns1__filesStatistics);
		break;
	case SOAP_TYPE__ns1__filesStatisticsResponse1:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__filesStatisticsResponse1*>(p->ptr), _ns1__filesStatisticsResponse1);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__filesStatisticsResponse1*>(p->ptr), _ns1__filesStatisticsResponse1);
		break;
	case SOAP_TYPE__ns1__totalServFilesSize:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__totalServFilesSize*>(p->ptr), _ns1__totalServFilesSize);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__totalServFilesSize*>(p->ptr), _ns1__totalServFilesSize);
		break;
	case SOAP_TYPE__ns1__totalServFilesSizeResponse1:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__totalServFilesSizeResponse1*>(p->ptr), _ns1__totalServFilesSizeResponse1);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__totalServFilesSizeResponse1*>(p->ptr), _ns1__totalServFilesSizeResponse1);
		break;
	case SOAP_TYPE___ns1__storeFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__storeFile*>(p->ptr), struct __ns1__storeFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__storeFile*>(p->ptr), struct __ns1__storeFile);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__ns1__storeFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__storeFile type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__storeFile*)p = *(_ns1__storeFile*)q;
		break;
	case SOAP_TYPE__ns1__storeFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__storeFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__storeFileResponse*)p = *(_ns1__storeFileResponse*)q;
		break;
	case SOAP_TYPE__ns1__createFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__createFile type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__createFile*)p = *(_ns1__createFile*)q;
		break;
	case SOAP_TYPE__ns1__createFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__createFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__createFileResponse*)p = *(_ns1__createFileResponse*)q;
		break;
	case SOAP_TYPE__ns1__modifyFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__modifyFile type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__modifyFile*)p = *(_ns1__modifyFile*)q;
		break;
	case SOAP_TYPE__ns1__modifyFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__modifyFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__modifyFileResponse*)p = *(_ns1__modifyFileResponse*)q;
		break;
	case SOAP_TYPE__ns1__removeFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__removeFile type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__removeFile*)p = *(_ns1__removeFile*)q;
		break;
	case SOAP_TYPE__ns1__removeFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__removeFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__removeFileResponse*)p = *(_ns1__removeFileResponse*)q;
		break;
	case SOAP_TYPE__ns1__store_USCOREexec_USCOREfile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__store_USCOREexec_USCOREfile type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__store_USCOREexec_USCOREfile*)p = *(_ns1__store_USCOREexec_USCOREfile*)q;
		break;
	case SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__store_USCOREexec_USCOREfileResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__store_USCOREexec_USCOREfileResponse*)p = *(_ns1__store_USCOREexec_USCOREfileResponse*)q;
		break;
	case SOAP_TYPE__ns1__clientLogFiles:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__clientLogFiles type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__clientLogFiles*)p = *(_ns1__clientLogFiles*)q;
		break;
	case SOAP_TYPE__ns1__NewOperationResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__NewOperationResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__NewOperationResponse*)p = *(_ns1__NewOperationResponse*)q;
		break;
	case SOAP_TYPE__ns1__clientLogFilesResponse1:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__clientLogFilesResponse1 type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__clientLogFilesResponse1*)p = *(_ns1__clientLogFilesResponse1*)q;
		break;
	case SOAP_TYPE__ns1__servFiles:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__servFiles type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__servFiles*)p = *(_ns1__servFiles*)q;
		break;
	case SOAP_TYPE__ns1__servFilesResponse1:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__servFilesResponse1 type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__servFilesResponse1*)p = *(_ns1__servFilesResponse1*)q;
		break;
	case SOAP_TYPE__ns1__filesInCertainProgLanguage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__filesInCertainProgLanguage type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__filesInCertainProgLanguage*)p = *(_ns1__filesInCertainProgLanguage*)q;
		break;
	case SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__filesInCertainProgLanguageResponse1 type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__filesInCertainProgLanguageResponse1*)p = *(_ns1__filesInCertainProgLanguageResponse1*)q;
		break;
	case SOAP_TYPE__ns1__largestServFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__largestServFile type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__largestServFile*)p = *(_ns1__largestServFile*)q;
		break;
	case SOAP_TYPE__ns1__largestServFileResponse1:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__largestServFileResponse1 type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__largestServFileResponse1*)p = *(_ns1__largestServFileResponse1*)q;
		break;
	case SOAP_TYPE__ns1__smallestServFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__smallestServFile type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__smallestServFile*)p = *(_ns1__smallestServFile*)q;
		break;
	case SOAP_TYPE__ns1__smallestServFileResponse1:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__smallestServFileResponse1 type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__smallestServFileResponse1*)p = *(_ns1__smallestServFileResponse1*)q;
		break;
	case SOAP_TYPE__ns1__filesStatistics:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__filesStatistics type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__filesStatistics*)p = *(_ns1__filesStatistics*)q;
		break;
	case SOAP_TYPE__ns1__filesStatisticsResponse1:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__filesStatisticsResponse1 type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__filesStatisticsResponse1*)p = *(_ns1__filesStatisticsResponse1*)q;
		break;
	case SOAP_TYPE__ns1__totalServFilesSize:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__totalServFilesSize type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__totalServFilesSize*)p = *(_ns1__totalServFilesSize*)q;
		break;
	case SOAP_TYPE__ns1__totalServFilesSizeResponse1:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__totalServFilesSizeResponse1 type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__totalServFilesSizeResponse1*)p = *(_ns1__totalServFilesSizeResponse1*)q;
		break;
	case SOAP_TYPE___ns1__storeFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__storeFile type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__storeFile*)p = *(struct __ns1__storeFile*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__totalServFilesSizeResponse1::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__totalServFilesSizeResponse1::out);
}

void _ns1__totalServFilesSizeResponse1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__totalServFilesSizeResponse1::out);
#endif
}

int _ns1__totalServFilesSizeResponse1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__totalServFilesSizeResponse1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__totalServFilesSizeResponse1(struct soap *soap, const char *tag, int id, const _ns1__totalServFilesSizeResponse1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__totalServFilesSizeResponse1), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__totalServFilesSizeResponse1::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__totalServFilesSizeResponse1::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__totalServFilesSizeResponse1(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__totalServFilesSizeResponse1 * SOAP_FMAC4 soap_in__ns1__totalServFilesSizeResponse1(struct soap *soap, const char *tag, _ns1__totalServFilesSizeResponse1 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__totalServFilesSizeResponse1*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__totalServFilesSizeResponse1, sizeof(_ns1__totalServFilesSizeResponse1), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__totalServFilesSizeResponse1)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__totalServFilesSizeResponse1 *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__totalServFilesSizeResponse1::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__totalServFilesSizeResponse1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__totalServFilesSizeResponse1, SOAP_TYPE__ns1__totalServFilesSizeResponse1, sizeof(_ns1__totalServFilesSizeResponse1), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__totalServFilesSizeResponse1 * SOAP_FMAC2 soap_instantiate__ns1__totalServFilesSizeResponse1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__totalServFilesSizeResponse1(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__totalServFilesSizeResponse1 *p;
	size_t k = sizeof(_ns1__totalServFilesSizeResponse1);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__totalServFilesSizeResponse1, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__totalServFilesSizeResponse1);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__totalServFilesSizeResponse1, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__totalServFilesSizeResponse1 location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__totalServFilesSizeResponse1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__totalServFilesSizeResponse1(soap, tag ? tag : "ns1:totalServFilesSizeResponse1", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__totalServFilesSizeResponse1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__totalServFilesSizeResponse1(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__totalServFilesSizeResponse1 * SOAP_FMAC4 soap_get__ns1__totalServFilesSizeResponse1(struct soap *soap, _ns1__totalServFilesSizeResponse1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__totalServFilesSizeResponse1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__totalServFilesSize::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__totalServFilesSize::in);
}

void _ns1__totalServFilesSize::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__totalServFilesSize::in);
#endif
}

int _ns1__totalServFilesSize::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__totalServFilesSize(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__totalServFilesSize(struct soap *soap, const char *tag, int id, const _ns1__totalServFilesSize *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__totalServFilesSize), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__totalServFilesSize::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__totalServFilesSize::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__totalServFilesSize(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__totalServFilesSize * SOAP_FMAC4 soap_in__ns1__totalServFilesSize(struct soap *soap, const char *tag, _ns1__totalServFilesSize *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__totalServFilesSize*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__totalServFilesSize, sizeof(_ns1__totalServFilesSize), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__totalServFilesSize)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__totalServFilesSize *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__totalServFilesSize::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__totalServFilesSize *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__totalServFilesSize, SOAP_TYPE__ns1__totalServFilesSize, sizeof(_ns1__totalServFilesSize), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__totalServFilesSize * SOAP_FMAC2 soap_instantiate__ns1__totalServFilesSize(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__totalServFilesSize(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__totalServFilesSize *p;
	size_t k = sizeof(_ns1__totalServFilesSize);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__totalServFilesSize, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__totalServFilesSize);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__totalServFilesSize, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__totalServFilesSize location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__totalServFilesSize::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__totalServFilesSize(soap, tag ? tag : "ns1:totalServFilesSize", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__totalServFilesSize::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__totalServFilesSize(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__totalServFilesSize * SOAP_FMAC4 soap_get__ns1__totalServFilesSize(struct soap *soap, _ns1__totalServFilesSize *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__totalServFilesSize(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__filesStatisticsResponse1::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__filesStatisticsResponse1::out);
}

void _ns1__filesStatisticsResponse1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__filesStatisticsResponse1::out);
#endif
}

int _ns1__filesStatisticsResponse1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__filesStatisticsResponse1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__filesStatisticsResponse1(struct soap *soap, const char *tag, int id, const _ns1__filesStatisticsResponse1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__filesStatisticsResponse1), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__filesStatisticsResponse1::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__filesStatisticsResponse1::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__filesStatisticsResponse1(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__filesStatisticsResponse1 * SOAP_FMAC4 soap_in__ns1__filesStatisticsResponse1(struct soap *soap, const char *tag, _ns1__filesStatisticsResponse1 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__filesStatisticsResponse1*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__filesStatisticsResponse1, sizeof(_ns1__filesStatisticsResponse1), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__filesStatisticsResponse1)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__filesStatisticsResponse1 *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__filesStatisticsResponse1::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__filesStatisticsResponse1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__filesStatisticsResponse1, SOAP_TYPE__ns1__filesStatisticsResponse1, sizeof(_ns1__filesStatisticsResponse1), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__filesStatisticsResponse1 * SOAP_FMAC2 soap_instantiate__ns1__filesStatisticsResponse1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__filesStatisticsResponse1(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__filesStatisticsResponse1 *p;
	size_t k = sizeof(_ns1__filesStatisticsResponse1);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__filesStatisticsResponse1, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__filesStatisticsResponse1);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__filesStatisticsResponse1, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__filesStatisticsResponse1 location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__filesStatisticsResponse1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__filesStatisticsResponse1(soap, tag ? tag : "ns1:filesStatisticsResponse1", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__filesStatisticsResponse1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__filesStatisticsResponse1(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__filesStatisticsResponse1 * SOAP_FMAC4 soap_get__ns1__filesStatisticsResponse1(struct soap *soap, _ns1__filesStatisticsResponse1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__filesStatisticsResponse1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__filesStatistics::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__filesStatistics::in);
}

void _ns1__filesStatistics::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__filesStatistics::in);
#endif
}

int _ns1__filesStatistics::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__filesStatistics(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__filesStatistics(struct soap *soap, const char *tag, int id, const _ns1__filesStatistics *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__filesStatistics), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__filesStatistics::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__filesStatistics::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__filesStatistics(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__filesStatistics * SOAP_FMAC4 soap_in__ns1__filesStatistics(struct soap *soap, const char *tag, _ns1__filesStatistics *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__filesStatistics*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__filesStatistics, sizeof(_ns1__filesStatistics), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__filesStatistics)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__filesStatistics *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__filesStatistics::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__filesStatistics *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__filesStatistics, SOAP_TYPE__ns1__filesStatistics, sizeof(_ns1__filesStatistics), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__filesStatistics * SOAP_FMAC2 soap_instantiate__ns1__filesStatistics(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__filesStatistics(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__filesStatistics *p;
	size_t k = sizeof(_ns1__filesStatistics);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__filesStatistics, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__filesStatistics);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__filesStatistics, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__filesStatistics location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__filesStatistics::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__filesStatistics(soap, tag ? tag : "ns1:filesStatistics", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__filesStatistics::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__filesStatistics(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__filesStatistics * SOAP_FMAC4 soap_get__ns1__filesStatistics(struct soap *soap, _ns1__filesStatistics *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__filesStatistics(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__smallestServFileResponse1::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__smallestServFileResponse1::out);
}

void _ns1__smallestServFileResponse1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__smallestServFileResponse1::out);
#endif
}

int _ns1__smallestServFileResponse1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__smallestServFileResponse1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__smallestServFileResponse1(struct soap *soap, const char *tag, int id, const _ns1__smallestServFileResponse1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__smallestServFileResponse1), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__smallestServFileResponse1::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__smallestServFileResponse1::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__smallestServFileResponse1(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__smallestServFileResponse1 * SOAP_FMAC4 soap_in__ns1__smallestServFileResponse1(struct soap *soap, const char *tag, _ns1__smallestServFileResponse1 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__smallestServFileResponse1*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__smallestServFileResponse1, sizeof(_ns1__smallestServFileResponse1), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__smallestServFileResponse1)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__smallestServFileResponse1 *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__smallestServFileResponse1::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__smallestServFileResponse1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__smallestServFileResponse1, SOAP_TYPE__ns1__smallestServFileResponse1, sizeof(_ns1__smallestServFileResponse1), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__smallestServFileResponse1 * SOAP_FMAC2 soap_instantiate__ns1__smallestServFileResponse1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__smallestServFileResponse1(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__smallestServFileResponse1 *p;
	size_t k = sizeof(_ns1__smallestServFileResponse1);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__smallestServFileResponse1, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__smallestServFileResponse1);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__smallestServFileResponse1, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__smallestServFileResponse1 location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__smallestServFileResponse1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__smallestServFileResponse1(soap, tag ? tag : "ns1:smallestServFileResponse1", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__smallestServFileResponse1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__smallestServFileResponse1(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__smallestServFileResponse1 * SOAP_FMAC4 soap_get__ns1__smallestServFileResponse1(struct soap *soap, _ns1__smallestServFileResponse1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__smallestServFileResponse1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__smallestServFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__smallestServFile::in);
}

void _ns1__smallestServFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__smallestServFile::in);
#endif
}

int _ns1__smallestServFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__smallestServFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__smallestServFile(struct soap *soap, const char *tag, int id, const _ns1__smallestServFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__smallestServFile), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__smallestServFile::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__smallestServFile::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__smallestServFile(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__smallestServFile * SOAP_FMAC4 soap_in__ns1__smallestServFile(struct soap *soap, const char *tag, _ns1__smallestServFile *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__smallestServFile*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__smallestServFile, sizeof(_ns1__smallestServFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__smallestServFile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__smallestServFile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__smallestServFile::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__smallestServFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__smallestServFile, SOAP_TYPE__ns1__smallestServFile, sizeof(_ns1__smallestServFile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__smallestServFile * SOAP_FMAC2 soap_instantiate__ns1__smallestServFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__smallestServFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__smallestServFile *p;
	size_t k = sizeof(_ns1__smallestServFile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__smallestServFile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__smallestServFile);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__smallestServFile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__smallestServFile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__smallestServFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__smallestServFile(soap, tag ? tag : "ns1:smallestServFile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__smallestServFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__smallestServFile(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__smallestServFile * SOAP_FMAC4 soap_get__ns1__smallestServFile(struct soap *soap, _ns1__smallestServFile *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__smallestServFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__largestServFileResponse1::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__largestServFileResponse1::out);
}

void _ns1__largestServFileResponse1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__largestServFileResponse1::out);
#endif
}

int _ns1__largestServFileResponse1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__largestServFileResponse1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__largestServFileResponse1(struct soap *soap, const char *tag, int id, const _ns1__largestServFileResponse1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__largestServFileResponse1), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__largestServFileResponse1::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__largestServFileResponse1::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__largestServFileResponse1(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__largestServFileResponse1 * SOAP_FMAC4 soap_in__ns1__largestServFileResponse1(struct soap *soap, const char *tag, _ns1__largestServFileResponse1 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__largestServFileResponse1*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__largestServFileResponse1, sizeof(_ns1__largestServFileResponse1), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__largestServFileResponse1)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__largestServFileResponse1 *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__largestServFileResponse1::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__largestServFileResponse1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__largestServFileResponse1, SOAP_TYPE__ns1__largestServFileResponse1, sizeof(_ns1__largestServFileResponse1), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__largestServFileResponse1 * SOAP_FMAC2 soap_instantiate__ns1__largestServFileResponse1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__largestServFileResponse1(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__largestServFileResponse1 *p;
	size_t k = sizeof(_ns1__largestServFileResponse1);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__largestServFileResponse1, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__largestServFileResponse1);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__largestServFileResponse1, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__largestServFileResponse1 location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__largestServFileResponse1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__largestServFileResponse1(soap, tag ? tag : "ns1:largestServFileResponse1", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__largestServFileResponse1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__largestServFileResponse1(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__largestServFileResponse1 * SOAP_FMAC4 soap_get__ns1__largestServFileResponse1(struct soap *soap, _ns1__largestServFileResponse1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__largestServFileResponse1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__largestServFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__largestServFile::in);
}

void _ns1__largestServFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__largestServFile::in);
#endif
}

int _ns1__largestServFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__largestServFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__largestServFile(struct soap *soap, const char *tag, int id, const _ns1__largestServFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__largestServFile), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__largestServFile::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__largestServFile::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__largestServFile(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__largestServFile * SOAP_FMAC4 soap_in__ns1__largestServFile(struct soap *soap, const char *tag, _ns1__largestServFile *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__largestServFile*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__largestServFile, sizeof(_ns1__largestServFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__largestServFile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__largestServFile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__largestServFile::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__largestServFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__largestServFile, SOAP_TYPE__ns1__largestServFile, sizeof(_ns1__largestServFile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__largestServFile * SOAP_FMAC2 soap_instantiate__ns1__largestServFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__largestServFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__largestServFile *p;
	size_t k = sizeof(_ns1__largestServFile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__largestServFile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__largestServFile);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__largestServFile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__largestServFile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__largestServFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__largestServFile(soap, tag ? tag : "ns1:largestServFile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__largestServFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__largestServFile(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__largestServFile * SOAP_FMAC4 soap_get__ns1__largestServFile(struct soap *soap, _ns1__largestServFile *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__largestServFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__filesInCertainProgLanguageResponse1::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__filesInCertainProgLanguageResponse1::out);
}

void _ns1__filesInCertainProgLanguageResponse1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__filesInCertainProgLanguageResponse1::out);
#endif
}

int _ns1__filesInCertainProgLanguageResponse1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__filesInCertainProgLanguageResponse1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__filesInCertainProgLanguageResponse1(struct soap *soap, const char *tag, int id, const _ns1__filesInCertainProgLanguageResponse1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__filesInCertainProgLanguageResponse1::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__filesInCertainProgLanguageResponse1::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__filesInCertainProgLanguageResponse1(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__filesInCertainProgLanguageResponse1 * SOAP_FMAC4 soap_in__ns1__filesInCertainProgLanguageResponse1(struct soap *soap, const char *tag, _ns1__filesInCertainProgLanguageResponse1 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__filesInCertainProgLanguageResponse1*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1, sizeof(_ns1__filesInCertainProgLanguageResponse1), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__filesInCertainProgLanguageResponse1 *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__filesInCertainProgLanguageResponse1::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__filesInCertainProgLanguageResponse1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1, SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1, sizeof(_ns1__filesInCertainProgLanguageResponse1), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__filesInCertainProgLanguageResponse1 * SOAP_FMAC2 soap_instantiate__ns1__filesInCertainProgLanguageResponse1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__filesInCertainProgLanguageResponse1(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__filesInCertainProgLanguageResponse1 *p;
	size_t k = sizeof(_ns1__filesInCertainProgLanguageResponse1);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__filesInCertainProgLanguageResponse1, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__filesInCertainProgLanguageResponse1);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__filesInCertainProgLanguageResponse1, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__filesInCertainProgLanguageResponse1 location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__filesInCertainProgLanguageResponse1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__filesInCertainProgLanguageResponse1(soap, tag ? tag : "ns1:filesInCertainProgLanguageResponse1", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__filesInCertainProgLanguageResponse1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__filesInCertainProgLanguageResponse1(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__filesInCertainProgLanguageResponse1 * SOAP_FMAC4 soap_get__ns1__filesInCertainProgLanguageResponse1(struct soap *soap, _ns1__filesInCertainProgLanguageResponse1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__filesInCertainProgLanguageResponse1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__filesInCertainProgLanguage::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__filesInCertainProgLanguage::in);
}

void _ns1__filesInCertainProgLanguage::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__filesInCertainProgLanguage::in);
#endif
}

int _ns1__filesInCertainProgLanguage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__filesInCertainProgLanguage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__filesInCertainProgLanguage(struct soap *soap, const char *tag, int id, const _ns1__filesInCertainProgLanguage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__filesInCertainProgLanguage), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__filesInCertainProgLanguage::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__filesInCertainProgLanguage::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__filesInCertainProgLanguage(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__filesInCertainProgLanguage * SOAP_FMAC4 soap_in__ns1__filesInCertainProgLanguage(struct soap *soap, const char *tag, _ns1__filesInCertainProgLanguage *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__filesInCertainProgLanguage*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__filesInCertainProgLanguage, sizeof(_ns1__filesInCertainProgLanguage), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__filesInCertainProgLanguage)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__filesInCertainProgLanguage *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__filesInCertainProgLanguage::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__filesInCertainProgLanguage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__filesInCertainProgLanguage, SOAP_TYPE__ns1__filesInCertainProgLanguage, sizeof(_ns1__filesInCertainProgLanguage), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__filesInCertainProgLanguage * SOAP_FMAC2 soap_instantiate__ns1__filesInCertainProgLanguage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__filesInCertainProgLanguage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__filesInCertainProgLanguage *p;
	size_t k = sizeof(_ns1__filesInCertainProgLanguage);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__filesInCertainProgLanguage, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__filesInCertainProgLanguage);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__filesInCertainProgLanguage, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__filesInCertainProgLanguage location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__filesInCertainProgLanguage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__filesInCertainProgLanguage(soap, tag ? tag : "ns1:filesInCertainProgLanguage", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__filesInCertainProgLanguage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__filesInCertainProgLanguage(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__filesInCertainProgLanguage * SOAP_FMAC4 soap_get__ns1__filesInCertainProgLanguage(struct soap *soap, _ns1__filesInCertainProgLanguage *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__filesInCertainProgLanguage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__servFilesResponse1::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__servFilesResponse1::out);
}

void _ns1__servFilesResponse1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__servFilesResponse1::out);
#endif
}

int _ns1__servFilesResponse1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__servFilesResponse1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__servFilesResponse1(struct soap *soap, const char *tag, int id, const _ns1__servFilesResponse1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__servFilesResponse1), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__servFilesResponse1::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__servFilesResponse1::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__servFilesResponse1(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__servFilesResponse1 * SOAP_FMAC4 soap_in__ns1__servFilesResponse1(struct soap *soap, const char *tag, _ns1__servFilesResponse1 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__servFilesResponse1*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__servFilesResponse1, sizeof(_ns1__servFilesResponse1), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__servFilesResponse1)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__servFilesResponse1 *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__servFilesResponse1::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__servFilesResponse1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__servFilesResponse1, SOAP_TYPE__ns1__servFilesResponse1, sizeof(_ns1__servFilesResponse1), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__servFilesResponse1 * SOAP_FMAC2 soap_instantiate__ns1__servFilesResponse1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__servFilesResponse1(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__servFilesResponse1 *p;
	size_t k = sizeof(_ns1__servFilesResponse1);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__servFilesResponse1, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__servFilesResponse1);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__servFilesResponse1, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__servFilesResponse1 location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__servFilesResponse1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__servFilesResponse1(soap, tag ? tag : "ns1:servFilesResponse1", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__servFilesResponse1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__servFilesResponse1(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__servFilesResponse1 * SOAP_FMAC4 soap_get__ns1__servFilesResponse1(struct soap *soap, _ns1__servFilesResponse1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__servFilesResponse1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__servFiles::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__servFiles::in);
}

void _ns1__servFiles::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__servFiles::in);
#endif
}

int _ns1__servFiles::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__servFiles(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__servFiles(struct soap *soap, const char *tag, int id, const _ns1__servFiles *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__servFiles), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__servFiles::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__servFiles::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__servFiles(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__servFiles * SOAP_FMAC4 soap_in__ns1__servFiles(struct soap *soap, const char *tag, _ns1__servFiles *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__servFiles*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__servFiles, sizeof(_ns1__servFiles), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__servFiles)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__servFiles *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__servFiles::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__servFiles *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__servFiles, SOAP_TYPE__ns1__servFiles, sizeof(_ns1__servFiles), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__servFiles * SOAP_FMAC2 soap_instantiate__ns1__servFiles(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__servFiles(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__servFiles *p;
	size_t k = sizeof(_ns1__servFiles);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__servFiles, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__servFiles);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__servFiles, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__servFiles location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__servFiles::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__servFiles(soap, tag ? tag : "ns1:servFiles", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__servFiles::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__servFiles(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__servFiles * SOAP_FMAC4 soap_get__ns1__servFiles(struct soap *soap, _ns1__servFiles *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__servFiles(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__clientLogFilesResponse1::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__clientLogFilesResponse1::out);
}

void _ns1__clientLogFilesResponse1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__clientLogFilesResponse1::out);
#endif
}

int _ns1__clientLogFilesResponse1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__clientLogFilesResponse1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__clientLogFilesResponse1(struct soap *soap, const char *tag, int id, const _ns1__clientLogFilesResponse1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__clientLogFilesResponse1), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__clientLogFilesResponse1::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__clientLogFilesResponse1::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__clientLogFilesResponse1(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__clientLogFilesResponse1 * SOAP_FMAC4 soap_in__ns1__clientLogFilesResponse1(struct soap *soap, const char *tag, _ns1__clientLogFilesResponse1 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__clientLogFilesResponse1*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__clientLogFilesResponse1, sizeof(_ns1__clientLogFilesResponse1), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__clientLogFilesResponse1)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__clientLogFilesResponse1 *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__clientLogFilesResponse1::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__clientLogFilesResponse1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__clientLogFilesResponse1, SOAP_TYPE__ns1__clientLogFilesResponse1, sizeof(_ns1__clientLogFilesResponse1), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__clientLogFilesResponse1 * SOAP_FMAC2 soap_instantiate__ns1__clientLogFilesResponse1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__clientLogFilesResponse1(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__clientLogFilesResponse1 *p;
	size_t k = sizeof(_ns1__clientLogFilesResponse1);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__clientLogFilesResponse1, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__clientLogFilesResponse1);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__clientLogFilesResponse1, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__clientLogFilesResponse1 location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__clientLogFilesResponse1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__clientLogFilesResponse1(soap, tag ? tag : "ns1:clientLogFilesResponse1", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__clientLogFilesResponse1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__clientLogFilesResponse1(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__clientLogFilesResponse1 * SOAP_FMAC4 soap_get__ns1__clientLogFilesResponse1(struct soap *soap, _ns1__clientLogFilesResponse1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__clientLogFilesResponse1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__NewOperationResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__NewOperationResponse::out);
}

void _ns1__NewOperationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__NewOperationResponse::out);
#endif
}

int _ns1__NewOperationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__NewOperationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__NewOperationResponse(struct soap *soap, const char *tag, int id, const _ns1__NewOperationResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__NewOperationResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__NewOperationResponse::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__NewOperationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__NewOperationResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__NewOperationResponse * SOAP_FMAC4 soap_in__ns1__NewOperationResponse(struct soap *soap, const char *tag, _ns1__NewOperationResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__NewOperationResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__NewOperationResponse, sizeof(_ns1__NewOperationResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__NewOperationResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__NewOperationResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__NewOperationResponse::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__NewOperationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__NewOperationResponse, SOAP_TYPE__ns1__NewOperationResponse, sizeof(_ns1__NewOperationResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__NewOperationResponse * SOAP_FMAC2 soap_instantiate__ns1__NewOperationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__NewOperationResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__NewOperationResponse *p;
	size_t k = sizeof(_ns1__NewOperationResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__NewOperationResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__NewOperationResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__NewOperationResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__NewOperationResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__NewOperationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__NewOperationResponse(soap, tag ? tag : "ns1:NewOperationResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__NewOperationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__NewOperationResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__NewOperationResponse * SOAP_FMAC4 soap_get__ns1__NewOperationResponse(struct soap *soap, _ns1__NewOperationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__NewOperationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__clientLogFiles::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__clientLogFiles::in);
}

void _ns1__clientLogFiles::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__clientLogFiles::in);
#endif
}

int _ns1__clientLogFiles::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__clientLogFiles(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__clientLogFiles(struct soap *soap, const char *tag, int id, const _ns1__clientLogFiles *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__clientLogFiles), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__clientLogFiles::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__clientLogFiles::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__clientLogFiles(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__clientLogFiles * SOAP_FMAC4 soap_in__ns1__clientLogFiles(struct soap *soap, const char *tag, _ns1__clientLogFiles *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__clientLogFiles*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__clientLogFiles, sizeof(_ns1__clientLogFiles), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__clientLogFiles)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__clientLogFiles *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__clientLogFiles::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__clientLogFiles *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__clientLogFiles, SOAP_TYPE__ns1__clientLogFiles, sizeof(_ns1__clientLogFiles), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__clientLogFiles * SOAP_FMAC2 soap_instantiate__ns1__clientLogFiles(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__clientLogFiles(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__clientLogFiles *p;
	size_t k = sizeof(_ns1__clientLogFiles);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__clientLogFiles, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__clientLogFiles);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__clientLogFiles, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__clientLogFiles location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__clientLogFiles::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__clientLogFiles(soap, tag ? tag : "ns1:clientLogFiles", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__clientLogFiles::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__clientLogFiles(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__clientLogFiles * SOAP_FMAC4 soap_get__ns1__clientLogFiles(struct soap *soap, _ns1__clientLogFiles *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__clientLogFiles(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__store_USCOREexec_USCOREfileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__store_USCOREexec_USCOREfileResponse::out);
}

void _ns1__store_USCOREexec_USCOREfileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__store_USCOREexec_USCOREfileResponse::out);
#endif
}

int _ns1__store_USCOREexec_USCOREfileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__store_USCOREexec_USCOREfileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__store_USCOREexec_USCOREfileResponse(struct soap *soap, const char *tag, int id, const _ns1__store_USCOREexec_USCOREfileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__store_USCOREexec_USCOREfileResponse::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__store_USCOREexec_USCOREfileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__store_USCOREexec_USCOREfileResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__store_USCOREexec_USCOREfileResponse * SOAP_FMAC4 soap_in__ns1__store_USCOREexec_USCOREfileResponse(struct soap *soap, const char *tag, _ns1__store_USCOREexec_USCOREfileResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__store_USCOREexec_USCOREfileResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse, sizeof(_ns1__store_USCOREexec_USCOREfileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__store_USCOREexec_USCOREfileResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__store_USCOREexec_USCOREfileResponse::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__store_USCOREexec_USCOREfileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse, SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse, sizeof(_ns1__store_USCOREexec_USCOREfileResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__store_USCOREexec_USCOREfileResponse * SOAP_FMAC2 soap_instantiate__ns1__store_USCOREexec_USCOREfileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__store_USCOREexec_USCOREfileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__store_USCOREexec_USCOREfileResponse *p;
	size_t k = sizeof(_ns1__store_USCOREexec_USCOREfileResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__store_USCOREexec_USCOREfileResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__store_USCOREexec_USCOREfileResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__store_USCOREexec_USCOREfileResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__store_USCOREexec_USCOREfileResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__store_USCOREexec_USCOREfileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__store_USCOREexec_USCOREfileResponse(soap, tag ? tag : "ns1:store_exec_fileResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__store_USCOREexec_USCOREfileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__store_USCOREexec_USCOREfileResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__store_USCOREexec_USCOREfileResponse * SOAP_FMAC4 soap_get__ns1__store_USCOREexec_USCOREfileResponse(struct soap *soap, _ns1__store_USCOREexec_USCOREfileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__store_USCOREexec_USCOREfileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__store_USCOREexec_USCOREfile::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__store_USCOREexec_USCOREfile::in);
}

void _ns1__store_USCOREexec_USCOREfile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__store_USCOREexec_USCOREfile::in);
#endif
}

int _ns1__store_USCOREexec_USCOREfile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__store_USCOREexec_USCOREfile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__store_USCOREexec_USCOREfile(struct soap *soap, const char *tag, int id, const _ns1__store_USCOREexec_USCOREfile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__store_USCOREexec_USCOREfile), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__store_USCOREexec_USCOREfile::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__store_USCOREexec_USCOREfile::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__store_USCOREexec_USCOREfile(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__store_USCOREexec_USCOREfile * SOAP_FMAC4 soap_in__ns1__store_USCOREexec_USCOREfile(struct soap *soap, const char *tag, _ns1__store_USCOREexec_USCOREfile *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__store_USCOREexec_USCOREfile*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__store_USCOREexec_USCOREfile, sizeof(_ns1__store_USCOREexec_USCOREfile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__store_USCOREexec_USCOREfile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__store_USCOREexec_USCOREfile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__store_USCOREexec_USCOREfile::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__store_USCOREexec_USCOREfile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__store_USCOREexec_USCOREfile, SOAP_TYPE__ns1__store_USCOREexec_USCOREfile, sizeof(_ns1__store_USCOREexec_USCOREfile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__store_USCOREexec_USCOREfile * SOAP_FMAC2 soap_instantiate__ns1__store_USCOREexec_USCOREfile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__store_USCOREexec_USCOREfile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__store_USCOREexec_USCOREfile *p;
	size_t k = sizeof(_ns1__store_USCOREexec_USCOREfile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__store_USCOREexec_USCOREfile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__store_USCOREexec_USCOREfile);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__store_USCOREexec_USCOREfile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__store_USCOREexec_USCOREfile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__store_USCOREexec_USCOREfile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__store_USCOREexec_USCOREfile(soap, tag ? tag : "ns1:store_exec_file", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__store_USCOREexec_USCOREfile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__store_USCOREexec_USCOREfile(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__store_USCOREexec_USCOREfile * SOAP_FMAC4 soap_get__ns1__store_USCOREexec_USCOREfile(struct soap *soap, _ns1__store_USCOREexec_USCOREfile *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__store_USCOREexec_USCOREfile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__removeFileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__removeFileResponse::out);
}

void _ns1__removeFileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__removeFileResponse::out);
#endif
}

int _ns1__removeFileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__removeFileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__removeFileResponse(struct soap *soap, const char *tag, int id, const _ns1__removeFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__removeFileResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__removeFileResponse::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__removeFileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__removeFileResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__removeFileResponse * SOAP_FMAC4 soap_in__ns1__removeFileResponse(struct soap *soap, const char *tag, _ns1__removeFileResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__removeFileResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__removeFileResponse, sizeof(_ns1__removeFileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__removeFileResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__removeFileResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__removeFileResponse::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__removeFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__removeFileResponse, SOAP_TYPE__ns1__removeFileResponse, sizeof(_ns1__removeFileResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__removeFileResponse * SOAP_FMAC2 soap_instantiate__ns1__removeFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__removeFileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__removeFileResponse *p;
	size_t k = sizeof(_ns1__removeFileResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__removeFileResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__removeFileResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__removeFileResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__removeFileResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__removeFileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__removeFileResponse(soap, tag ? tag : "ns1:removeFileResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__removeFileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__removeFileResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__removeFileResponse * SOAP_FMAC4 soap_get__ns1__removeFileResponse(struct soap *soap, _ns1__removeFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__removeFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__removeFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__removeFile::in);
}

void _ns1__removeFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__removeFile::in);
#endif
}

int _ns1__removeFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__removeFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__removeFile(struct soap *soap, const char *tag, int id, const _ns1__removeFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__removeFile), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__removeFile::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__removeFile::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__removeFile(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__removeFile * SOAP_FMAC4 soap_in__ns1__removeFile(struct soap *soap, const char *tag, _ns1__removeFile *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__removeFile*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__removeFile, sizeof(_ns1__removeFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__removeFile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__removeFile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__removeFile::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__removeFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__removeFile, SOAP_TYPE__ns1__removeFile, sizeof(_ns1__removeFile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__removeFile * SOAP_FMAC2 soap_instantiate__ns1__removeFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__removeFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__removeFile *p;
	size_t k = sizeof(_ns1__removeFile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__removeFile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__removeFile);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__removeFile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__removeFile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__removeFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__removeFile(soap, tag ? tag : "ns1:removeFile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__removeFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__removeFile(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__removeFile * SOAP_FMAC4 soap_get__ns1__removeFile(struct soap *soap, _ns1__removeFile *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__removeFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__modifyFileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__modifyFileResponse::out);
}

void _ns1__modifyFileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__modifyFileResponse::out);
#endif
}

int _ns1__modifyFileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__modifyFileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__modifyFileResponse(struct soap *soap, const char *tag, int id, const _ns1__modifyFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__modifyFileResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__modifyFileResponse::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__modifyFileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__modifyFileResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__modifyFileResponse * SOAP_FMAC4 soap_in__ns1__modifyFileResponse(struct soap *soap, const char *tag, _ns1__modifyFileResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__modifyFileResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__modifyFileResponse, sizeof(_ns1__modifyFileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__modifyFileResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__modifyFileResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__modifyFileResponse::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__modifyFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__modifyFileResponse, SOAP_TYPE__ns1__modifyFileResponse, sizeof(_ns1__modifyFileResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__modifyFileResponse * SOAP_FMAC2 soap_instantiate__ns1__modifyFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__modifyFileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__modifyFileResponse *p;
	size_t k = sizeof(_ns1__modifyFileResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__modifyFileResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__modifyFileResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__modifyFileResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__modifyFileResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__modifyFileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__modifyFileResponse(soap, tag ? tag : "ns1:modifyFileResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__modifyFileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__modifyFileResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__modifyFileResponse * SOAP_FMAC4 soap_get__ns1__modifyFileResponse(struct soap *soap, _ns1__modifyFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__modifyFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__modifyFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__modifyFile::in);
}

void _ns1__modifyFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__modifyFile::in);
#endif
}

int _ns1__modifyFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__modifyFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__modifyFile(struct soap *soap, const char *tag, int id, const _ns1__modifyFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__modifyFile), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__modifyFile::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__modifyFile::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__modifyFile(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__modifyFile * SOAP_FMAC4 soap_in__ns1__modifyFile(struct soap *soap, const char *tag, _ns1__modifyFile *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__modifyFile*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__modifyFile, sizeof(_ns1__modifyFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__modifyFile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__modifyFile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__modifyFile::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__modifyFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__modifyFile, SOAP_TYPE__ns1__modifyFile, sizeof(_ns1__modifyFile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__modifyFile * SOAP_FMAC2 soap_instantiate__ns1__modifyFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__modifyFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__modifyFile *p;
	size_t k = sizeof(_ns1__modifyFile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__modifyFile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__modifyFile);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__modifyFile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__modifyFile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__modifyFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__modifyFile(soap, tag ? tag : "ns1:modifyFile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__modifyFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__modifyFile(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__modifyFile * SOAP_FMAC4 soap_get__ns1__modifyFile(struct soap *soap, _ns1__modifyFile *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__modifyFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__createFileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__createFileResponse::out);
}

void _ns1__createFileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__createFileResponse::out);
#endif
}

int _ns1__createFileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__createFileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__createFileResponse(struct soap *soap, const char *tag, int id, const _ns1__createFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__createFileResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__createFileResponse::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__createFileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__createFileResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__createFileResponse * SOAP_FMAC4 soap_in__ns1__createFileResponse(struct soap *soap, const char *tag, _ns1__createFileResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__createFileResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__createFileResponse, sizeof(_ns1__createFileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__createFileResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__createFileResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__createFileResponse::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__createFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__createFileResponse, SOAP_TYPE__ns1__createFileResponse, sizeof(_ns1__createFileResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__createFileResponse * SOAP_FMAC2 soap_instantiate__ns1__createFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__createFileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__createFileResponse *p;
	size_t k = sizeof(_ns1__createFileResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__createFileResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__createFileResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__createFileResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__createFileResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__createFileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__createFileResponse(soap, tag ? tag : "ns1:createFileResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__createFileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__createFileResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__createFileResponse * SOAP_FMAC4 soap_get__ns1__createFileResponse(struct soap *soap, _ns1__createFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__createFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__createFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__createFile::in);
}

void _ns1__createFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__createFile::in);
#endif
}

int _ns1__createFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__createFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__createFile(struct soap *soap, const char *tag, int id, const _ns1__createFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__createFile), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__createFile::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__createFile::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__createFile(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__createFile * SOAP_FMAC4 soap_in__ns1__createFile(struct soap *soap, const char *tag, _ns1__createFile *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__createFile*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__createFile, sizeof(_ns1__createFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__createFile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__createFile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__createFile::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__createFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__createFile, SOAP_TYPE__ns1__createFile, sizeof(_ns1__createFile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__createFile * SOAP_FMAC2 soap_instantiate__ns1__createFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__createFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__createFile *p;
	size_t k = sizeof(_ns1__createFile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__createFile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__createFile);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__createFile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__createFile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__createFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__createFile(soap, tag ? tag : "ns1:createFile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__createFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__createFile(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__createFile * SOAP_FMAC4 soap_get__ns1__createFile(struct soap *soap, _ns1__createFile *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__createFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__storeFileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__storeFileResponse::out);
}

void _ns1__storeFileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__storeFileResponse::out);
#endif
}

int _ns1__storeFileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__storeFileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__storeFileResponse(struct soap *soap, const char *tag, int id, const _ns1__storeFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__storeFileResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "out", -1, &a->_ns1__storeFileResponse::out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__storeFileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__storeFileResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__storeFileResponse * SOAP_FMAC4 soap_in__ns1__storeFileResponse(struct soap *soap, const char *tag, _ns1__storeFileResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__storeFileResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__storeFileResponse, sizeof(_ns1__storeFileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__storeFileResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__storeFileResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_out1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "out", &a->_ns1__storeFileResponse::out, "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__storeFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__storeFileResponse, SOAP_TYPE__ns1__storeFileResponse, sizeof(_ns1__storeFileResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__storeFileResponse * SOAP_FMAC2 soap_instantiate__ns1__storeFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__storeFileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__storeFileResponse *p;
	size_t k = sizeof(_ns1__storeFileResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__storeFileResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__storeFileResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__storeFileResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__storeFileResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__storeFileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__storeFileResponse(soap, tag ? tag : "ns1:storeFileResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__storeFileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__storeFileResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__storeFileResponse * SOAP_FMAC4 soap_get__ns1__storeFileResponse(struct soap *soap, _ns1__storeFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__storeFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__storeFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__storeFile::in);
}

void _ns1__storeFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_ns1__storeFile::in);
#endif
}

int _ns1__storeFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__storeFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__storeFile(struct soap *soap, const char *tag, int id, const _ns1__storeFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__storeFile), type))
		return soap->error;
	if (soap_out_std__string(soap, "in", -1, &a->_ns1__storeFile::in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__storeFile::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__storeFile(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__storeFile * SOAP_FMAC4 soap_in__ns1__storeFile(struct soap *soap, const char *tag, _ns1__storeFile *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__storeFile*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__storeFile, sizeof(_ns1__storeFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__storeFile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__storeFile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_in1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "in", &a->_ns1__storeFile::in, "xsd:string"))
				{	soap_flag_in1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__storeFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__storeFile, SOAP_TYPE__ns1__storeFile, sizeof(_ns1__storeFile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__storeFile * SOAP_FMAC2 soap_instantiate__ns1__storeFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__storeFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__storeFile *p;
	size_t k = sizeof(_ns1__storeFile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__storeFile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__storeFile);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__storeFile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__storeFile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__storeFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__storeFile(soap, tag ? tag : "ns1:storeFile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__storeFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__storeFile(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__storeFile * SOAP_FMAC4 soap_get__ns1__storeFile(struct soap *soap, _ns1__storeFile *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__storeFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__storeFile(struct soap *soap, struct __ns1__storeFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__storeFile = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__storeFile(struct soap *soap, const struct __ns1__storeFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__storeFile(soap, &a->ns1__storeFile);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__storeFile(struct soap *soap, const char *tag, int id, const struct __ns1__storeFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__storeFile(soap, "ns1:storeFile", -1, &a->ns1__storeFile, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__storeFile * SOAP_FMAC4 soap_in___ns1__storeFile(struct soap *soap, const char *tag, struct __ns1__storeFile *a, const char *type)
{
	size_t soap_flag_ns1__storeFile = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__storeFile*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__storeFile, sizeof(struct __ns1__storeFile), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__storeFile(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__storeFile && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__storeFile(soap, "ns1:storeFile", &a->ns1__storeFile, ""))
				{	soap_flag_ns1__storeFile--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__storeFile * SOAP_FMAC2 soap_instantiate___ns1__storeFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__storeFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__storeFile *p;
	size_t k = sizeof(struct __ns1__storeFile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__storeFile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__storeFile);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__storeFile, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__storeFile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__storeFile(struct soap *soap, const struct __ns1__storeFile *a, const char *tag, const char *type)
{
	if (soap_out___ns1__storeFile(soap, tag ? tag : "-ns1:storeFile", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__storeFile * SOAP_FMAC4 soap_get___ns1__storeFile(struct soap *soap, struct __ns1__storeFile *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__storeFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__storeFile(struct soap *soap, _ns1__storeFile *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__storeFile))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__storeFile(struct soap *soap, const char *tag, int id, _ns1__storeFile *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__storeFile, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__storeFile ? type : NULL);
}

SOAP_FMAC3 _ns1__storeFile ** SOAP_FMAC4 soap_in_PointerTo_ns1__storeFile(struct soap *soap, const char *tag, _ns1__storeFile **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__storeFile **)soap_malloc(soap, sizeof(_ns1__storeFile *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__storeFile *)soap_instantiate__ns1__storeFile(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__storeFile **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__storeFile, sizeof(_ns1__storeFile), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__storeFile(struct soap *soap, _ns1__storeFile *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__storeFile(soap, tag ? tag : "ns1:storeFile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__storeFile ** SOAP_FMAC4 soap_get_PointerTo_ns1__storeFile(struct soap *soap, _ns1__storeFile **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__storeFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
